[
  {
    "instruction": "Example from NiceGUI: 3d_scene/main",
    "response": "from nicegui import app, ui\n\napp.add_static_files('/stl', 'static')\n\nwith ui.scene(width=1024, height=800) as scene:\n    scene.spot_light(distance=100, intensity=0.1).move(-10, 0, 10)\n    scene.stl('/stl/pikachu.stl').move(x=-0.5).scale(0.06)\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: ai_interface/main",
    "response": "import io\nimport os\n\nimport replicate  # very nice API to run AI models; see https://replicate.com/\n\nfrom nicegui import events, run, ui\n\nos.environ['REPLICATE_API_TOKEN'] = '...'  # TODO: set your Replicate API token here\n\n\nasync def transcribe_audio(e: events.UploadEventArguments):\n    transcription.text = 'Transcribing...'\n    output = await run.io_bound(\n        replicate.run,\n        'openai/whisper:8099696689d249cf8b122d833c36ac3f75505c666a395ca40ef26f68e7d3d16e',\n        input={'audio': io.BytesIO(await e.file.read())},\n    )\n    transcription.text = output.get('transcription', 'Transcription failed.')\n\n\nasync def generate_image():\n    image_button.props('loading')\n    output = await run.io_bound(\n        replicate.run,\n        'stability-ai/stable-diffusion:db21e45d3f7023abc2a46ee38a23973f6dce16bb082a930b0c49861f96d1e5bf',\n        input={'prompt': prompt.value},\n    )\n    image_button.props(remove='loading')\n    images.clear()\n    for image in output:\n        ui.image(image.url).classes('w-100 border border-gray-300 rounded-md')\n\nwith ui.row().classes('gap-16'):\n    with ui.column().classes('w-100 items-stretch'):\n        ui.label('OpenAI Whisper (voice transcription)').classes('text-2xl')\n        ui.upload(on_upload=transcribe_audio, auto_upload=True)\n        transcription = ui.label().classes('text-xl')\n    with ui.column().classes('w-100 items-stretch'):\n        ui.label('Stable Diffusion (image generator)').classes('text-2xl')\n        prompt = ui.input('Your prompt').on('keydown.enter', generate_image)\n        image_button = ui.button('Generate image', on_click=generate_image)\n        images = ui.column()\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: audio_recorder/audio_recorder",
    "response": "import base64\nfrom typing import Callable, Optional\n\nfrom nicegui import events, ui\n\n\nclass AudioRecorder(ui.element, component='audio_recorder.vue'):\n\n    def __init__(self, *, on_audio_ready: Optional[Callable] = None) -> None:\n        super().__init__()\n        self.recording = b''\n\n        def handle_audio(e: events.GenericEventArguments) -> None:\n            self.recording = base64.b64decode(e.args['audioBlobBase64'].encode())\n            if on_audio_ready:\n                on_audio_ready(self.recording)\n        self.on('audio_ready', handle_audio)\n\n    def start_recording(self) -> None:\n        self.run_method('startRecording')\n\n    def stop_recording(self) -> None:\n        self.run_method('stopRecording')\n\n    def play_recorded_audio(self) -> None:\n        self.run_method('playRecordedAudio')"
  },
  {
    "instruction": "Example from NiceGUI: audio_recorder/main",
    "response": "from audio_recorder import AudioRecorder\n\nfrom nicegui import ui\n\nwith ui.row().classes('w-full justify-center'):\n    audio_recorder = AudioRecorder(on_audio_ready=lambda data: ui.notify(f'Recorded {len(data)} bytes'))\n\nwith ui.row().classes('w-full justify-center'):\n    ui.button('Play', on_click=audio_recorder.play_recorded_audio) \\\n        .bind_enabled_from(audio_recorder, 'recording')\n    ui.button('Download', on_click=lambda: ui.download(audio_recorder.recording, 'audio.ogx')) \\\n        .bind_enabled_from(audio_recorder, 'recording')\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: authentication/main",
    "response": "\"\"\"This is just a simple authentication example.\n\nPlease see the `OAuth2 example at FastAPI <https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/>`_  or\nuse the great `Authlib package <https://docs.authlib.org/en/v0.13/client/starlette.html#using-fastapi>`_ to implement a classing real authentication system.\nHere we just demonstrate the NiceGUI integration.\n\"\"\"\nfrom typing import Optional\n\nfrom fastapi import Request\nfrom fastapi.responses import RedirectResponse\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nfrom nicegui import app, ui\n\n# in reality users passwords would obviously need to be hashed\npasswords = {'user1': 'pass1', 'user2': 'pass2'}\n\nunrestricted_page_routes = {'/login'}\n\n\nclass AuthMiddleware(BaseHTTPMiddleware):\n    \"\"\"This middleware restricts access to all NiceGUI pages.\n\n    It redirects the user to the login page if they are not authenticated.\n    \"\"\"\n\n    async def dispatch(self, request: Request, call_next):\n        if not app.storage.user.get('authenticated', False):\n            if not request.url.path.startswith('/_nicegui') and request.url.path not in unrestricted_page_routes:\n                return RedirectResponse(f'/login?redirect_to={request.url.path}')\n        return await call_next(request)\n\n\napp.add_middleware(AuthMiddleware)\n\n\n@ui.page('/')\ndef main_page() -> None:\n    def logout() -> None:\n        app.storage.user.clear()\n        ui.navigate.to('/login')\n\n    with ui.column().classes('absolute-center items-center'):\n        ui.label(f'Hello {app.storage.user[\"username\"]}!').classes('text-2xl')\n        ui.button(on_click=logout, icon='logout').props('outline round')\n\n\n@ui.page('/subpage')\ndef test_page() -> None:\n    ui.label('This is a sub page.')\n\n\n@ui.page('/login')\ndef login(redirect_to: str = '/') -> Optional[RedirectResponse]:\n    def try_login() -> None:  # local function to avoid passing username and password as arguments\n        if passwords.get(username.value) == password.value:\n            app.storage.user.update({'username': username.value, 'authenticated': True})\n            ui.navigate.to(redirect_to)  # go back to where the user wanted to go\n        else:\n            ui.notify('Wrong username or password', color='negative')\n\n    if app.storage.user.get('authenticated', False):\n        return RedirectResponse('/')\n    with ui.card().classes('absolute-center'):\n        username = ui.input('Username').on('keydown.enter', try_login)\n        password = ui.input('Password', password=True, password_toggle_button=True).on('keydown.enter', try_login)\n        ui.button('Log in', on_click=try_login)\n    return None\n\n\nif __name__ in {'__main__', '__mp_main__'}:\n    ui.run(storage_secret='THIS_NEEDS_TO_BE_CHANGED')"
  },
  {
    "instruction": "Example from NiceGUI: authentication/test_authentication",
    "response": "from nicegui.testing import User\n\n# pylint: disable=missing-function-docstring\n\n\nasync def test_login_logoff(user: User) -> None:\n    await user.open('/')\n    user.find('Username').type('user1')\n    user.find('Password').type('pass1')\n    user.find('Log in').click()\n    await user.should_see('Hello user1!')\n    user.find('logout').click()\n    await user.should_see('Log in')\n\n\nasync def test_wrong_password(user: User) -> None:\n    await user.open('/')\n    user.find('Username').type('user1')\n    user.find('Password').type('wrong').trigger('keydown.enter')\n    await user.should_see('Wrong username or password')\n\n\nasync def test_subpage_access(user: User) -> None:\n    await user.open('/subpage')\n    await user.should_see('Log in')\n    user.find('Username').type('user1')\n    user.find('Password').type('pass1').trigger('keydown.enter')\n    await user.should_see('This is a sub page.')"
  },
  {
    "instruction": "Example from NiceGUI: chat_app/main",
    "response": "from datetime import datetime\nfrom uuid import uuid4\n\nfrom nicegui import ui\n\nmessages: list[tuple[str, str, str, str]] = []\n\n\n@ui.refreshable\ndef chat_messages(own_id: str) -> None:\n    if messages:\n        for user_id, avatar, text, stamp in messages:\n            ui.chat_message(text=text, stamp=stamp, avatar=avatar, sent=own_id == user_id)\n    else:\n        ui.label('No messages yet').classes('mx-auto my-36')\n    ui.run_javascript('window.scrollTo(0, document.body.scrollHeight)')\n\n\n@ui.page('/')\nasync def main():\n    def send() -> None:\n        stamp = datetime.now().strftime('%X')\n        messages.append((user_id, avatar, text.value, stamp))\n        text.value = ''\n        chat_messages.refresh()\n\n    user_id = str(uuid4())\n    avatar = f'https://robohash.org/{user_id}?bgset=bg2'\n\n    ui.add_css(r'a:link, a:visited {color: inherit !important; text-decoration: none; font-weight: 500}')\n    with ui.footer().classes('bg-white'), ui.column().classes('w-full max-w-3xl mx-auto my-6'):\n        with ui.row().classes('w-full no-wrap items-center'):\n            with ui.avatar().on('click', lambda: ui.navigate.to(main)):\n                ui.image(avatar)\n            text = ui.input(placeholder='message').on('keydown.enter', send) \\\n                .props('rounded outlined input-class=mx-3').classes('flex-grow')\n        ui.markdown('simple chat app built with [NiceGUI](https://nicegui.io)') \\\n            .classes('text-xs self-end mr-8 m-[-1em] text-primary')\n\n    await ui.context.client.connected()  # chat_messages(...) uses run_javascript which is only possible after connecting\n    with ui.column().classes('w-full max-w-2xl mx-auto items-stretch'):\n        chat_messages(user_id)\n\n\nif __name__ in {'__main__', '__mp_main__'}:\n    ui.run()"
  },
  {
    "instruction": "Example from NiceGUI: chat_app/test_chat_app",
    "response": "from typing import Callable\n\nfrom nicegui import ui\nfrom nicegui.testing import User\n\n\nasync def test_basic_startup_appearance(user: User) -> None:\n    \"\"\"Test basic appearance of the chat app.\"\"\"\n    await user.open('/')\n    await user.should_see('simple chat app')\n    await user.should_see('https://robohash.org/')\n    await user.should_see('message')\n    await user.should_see('No messages yet')\n\n\nasync def test_sending_messages(create_user: Callable[[], User]) -> None:\n    \"\"\"Test sending messages from two different screens.\"\"\"\n    userA = create_user()\n    userB = create_user()\n\n    await userA.open('/')\n    userA.find(ui.input).type('Hello from screen A!').trigger('keydown.enter')\n    await userA.should_see('Hello from screen A!')\n    await userA.should_see('message')\n\n    await userB.open('/')\n    await userB.should_see('Hello from screen A!')\n    userB.find(ui.input).type('Hello from screen B!').trigger('keydown.enter')\n    await userB.should_see('message')\n\n    await userA.should_see('Hello from screen A!')\n    await userA.should_see('Hello from screen B!')"
  },
  {
    "instruction": "Example from NiceGUI: chat_with_ai/log_callback_handler",
    "response": "from typing import Any, Optional\n\nfrom langchain.callbacks.base import BaseCallbackHandler\nfrom langchain.schema import AgentAction, AgentFinish\n\nfrom nicegui import ui\n\n\nclass NiceGuiLogElementCallbackHandler(BaseCallbackHandler):\n    \"\"\"Callback Handler that writes to a log element.\"\"\"\n\n    def __init__(self, log_element: ui.log) -> None:\n        \"\"\"Initialize callback handler.\"\"\"\n        self.log = log_element\n\n    def on_chain_start(self, serialized: dict[str, Any], inputs: dict[str, Any], **kwargs: Any) -> None:\n        \"\"\"Print out that we are entering a chain.\"\"\"\n        self.log.push(f'\\n\\n> Entering new {serialized[\"id\"][-1]} chain...')\n\n    def on_chain_end(self, outputs: dict[str, Any], **kwargs: Any) -> None:\n        \"\"\"Print out that we finished a chain.\"\"\"\n        self.log.push('\\n> Finished chain.')\n        self.log.push(f'\\nOutputs: {outputs}')\n\n    def on_agent_action(self, action: AgentAction, **kwargs: Any) -> Any:\n        \"\"\"Run on agent action.\"\"\"\n        self.log.push(action.log)\n\n    def on_tool_end(self,\n                    output: str,\n                    observation_prefix: Optional[str] = None,\n                    llm_prefix: Optional[str] = None,\n                    **kwargs: Any,\n                    ) -> None:\n        \"\"\"If not the final action, print out observation.\"\"\"\n        if observation_prefix is not None:\n            self.log.push(f'\\n{observation_prefix}')\n        self.log.push(output)\n        if llm_prefix is not None:\n            self.log.push(f'\\n{llm_prefix}')\n\n    def on_text(self, text: str, **kwargs: Any) -> None:\n        \"\"\"Run when agent ends.\"\"\"\n        self.log.push(text)\n\n    def on_agent_finish(self, finish: AgentFinish, **kwargs: Any) -> None:\n        \"\"\"Run on agent end.\"\"\"\n        self.log.push(finish.log)"
  },
  {
    "instruction": "Example from NiceGUI: chat_with_ai/main",
    "response": "from html_sanitizer import Sanitizer\nfrom langchain_openai import ChatOpenAI\nfrom log_callback_handler import NiceGuiLogElementCallbackHandler\n\nfrom nicegui import ui\n\nOPENAI_API_KEY = 'not-set'  # TODO: set your OpenAI API key here\n\n\n@ui.page('/')\ndef main():\n    llm = ChatOpenAI(model_name='gpt-4o-mini', streaming=True, openai_api_key=OPENAI_API_KEY)\n\n    async def send() -> None:\n        question = text.value\n        text.value = ''\n\n        with message_container:\n            ui.chat_message(text=question, name='You', sent=True)\n            response_message = ui.chat_message(name='Bot', sent=False)\n            spinner = ui.spinner(type='dots')\n\n        response = ''\n        async for chunk in llm.astream(question, config={'callbacks': [NiceGuiLogElementCallbackHandler(log)]}):\n            response += chunk.content\n            response_message.clear()\n            with response_message:\n                ui.html(response, sanitize=Sanitizer().sanitize)\n            ui.run_javascript('window.scrollTo(0, document.body.scrollHeight)')\n        message_container.remove(spinner)\n\n    ui.add_css(r'a:link, a:visited {color: inherit !important; text-decoration: none; font-weight: 500}')\n\n    # the queries below are used to expand the contend down to the footer (content can then use flex-grow to expand)\n    ui.query('.q-page').classes('flex')\n    ui.query('.nicegui-content').classes('w-full')\n\n    with ui.tabs().classes('w-full') as tabs:\n        chat_tab = ui.tab('Chat')\n        logs_tab = ui.tab('Logs')\n    with ui.tab_panels(tabs, value=chat_tab).classes('w-full max-w-2xl mx-auto flex-grow items-stretch'):\n        message_container = ui.tab_panel(chat_tab).classes('items-stretch')\n        with ui.tab_panel(logs_tab):\n            log = ui.log().classes('w-full h-full')\n\n    with ui.footer().classes('bg-white'), ui.column().classes('w-full max-w-3xl mx-auto my-6'):\n        with ui.row().classes('w-full no-wrap items-center'):\n            placeholder = 'message' if OPENAI_API_KEY != 'not-set' else \\\n                'Please provide your OPENAI key in the Python script first!'\n            text = ui.input(placeholder=placeholder).props('rounded outlined input-class=mx-3') \\\n                .classes('w-full self-center').on('keydown.enter', send)\n        ui.markdown('simple chat app built with [NiceGUI](https://nicegui.io)') \\\n            .classes('text-xs self-end mr-8 m-[-1em] text-primary')\n\n\nui.run(title='Chat with GPT-3 (example)')"
  },
  {
    "instruction": "Example from NiceGUI: custom_binding/main",
    "response": "import random\nfrom typing import Optional, cast\n\nfrom typing_extensions import Self\n\nfrom nicegui import ui\nfrom nicegui.binding import BindableProperty, bind_from\n\n\nclass colorful_label(ui.label):\n    \"\"\"A label with a bindable background color.\"\"\"\n\n    # This class variable defines what happens when the background property changes.\n    background = BindableProperty(\n        on_change=lambda sender, value: cast(Self, sender)._handle_background_change(value))\n\n    def __init__(self, text: str = '') -> None:\n        super().__init__(text)\n        self.background: Optional[str] = None  # initialize the background property\n\n    def _handle_background_change(self, bg_class: str) -> None:\n        \"\"\"Update the classes of the label when the background property changes.\"\"\"\n        self._classes = [c for c in self._classes if not c.startswith('bg-')]\n        self._classes.append(bg_class)\n\n\ntemperatures = {'Berlin': 5, 'New York': 15, 'Tokio': 25}\nui.button(icon='refresh', on_click=lambda: temperatures.update({city: random.randint(0, 30) for city in temperatures}))\n\n\nfor city in temperatures:\n    label = colorful_label().classes('w-48 text-center') \\\n        .bind_text_from(temperatures, city, backward=lambda t, city=city: f'{city} ({t}°C)')\n    # Bind background color from temperature.\n    # There is also a bind_to method which would propagate changes from the label to the temperatures dictionary\n    # and a bind method which would propagate changes both ways.\n    bind_from(self_obj=label, self_name='background',\n              other_obj=temperatures, other_name=city,\n              backward=lambda t: 'bg-green' if t < 10 else 'bg-yellow' if t < 20 else 'bg-orange')\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: custom_vue_component/counter",
    "response": "from typing import Callable, Optional\n\nfrom nicegui.element import Element\n\n\nclass Counter(Element, component='counter.js'):\n\n    def __init__(self, title: str, *, on_change: Optional[Callable] = None) -> None:\n        super().__init__()\n        self._props['title'] = title\n        self.on('change', on_change)\n\n    def reset(self) -> None:\n        self.run_method('reset')"
  },
  {
    "instruction": "Example from NiceGUI: custom_vue_component/main",
    "response": "from counter import Counter\nfrom on_off import OnOff\n\nfrom nicegui import ui\n\nwith ui.row(align_items='center'):\n    counter = Counter('Count', on_change=lambda e: ui.notify(f'The value changed to {e.args}.'))\n    ui.button('Reset', on_click=counter.reset).props('outline')\n\nwith ui.row(align_items='center'):\n    on_off = OnOff('State', on_change=lambda e: ui.notify(f'The value changed to {e.args}.'))\n    ui.button('Reset', on_click=on_off.reset).props('outline')\n\n\nui.run(uvicorn_reload_includes='*.py,*.js,*.vue')"
  },
  {
    "instruction": "Example from NiceGUI: custom_vue_component/on_off",
    "response": "from typing import Callable, Optional\n\nfrom nicegui.element import Element\n\n\nclass OnOff(Element, component='on_off.vue'):\n\n    def __init__(self, title: str, *, on_change: Optional[Callable] = None) -> None:\n        super().__init__()\n        self._props['title'] = title\n        self.on('change', on_change)\n\n    def reset(self) -> None:\n        self.run_method('reset')"
  },
  {
    "instruction": "Example from NiceGUI: descope_auth/main",
    "response": "import json\n\nimport user\n\nfrom nicegui import ui\n\n\n@user.login_page\ndef login():\n    user.login_form().on('success', lambda: ui.navigate.to('/'))\n\n\n@user.page('/')\ndef home():\n    ui.code(json.dumps(user.about(), indent=2), language='json')\n    ui.button('Logout', on_click=user.logout)\n\n\n@user.page('/async')\nasync def async_page():\n    await ui.button('Wait for it...').clicked()\n    ui.label('This is an async page')\n\n\nui.run(storage_secret='THIS_NEEDS_TO_BE_CHANGED')"
  },
  {
    "instruction": "Example from NiceGUI: descope_auth/user",
    "response": "import logging\nimport os\nfrom typing import Any, Callable\n\nfrom descope import AuthException, DescopeClient\n\nfrom nicegui import app, helpers, ui\n\nDESCOPE_ID = os.environ.get('DESCOPE_PROJECT_ID', '')\n\ntry:\n    descope_client = DescopeClient(project_id=DESCOPE_ID)\nexcept AuthException as ex:\n    print(ex.error_message)\n\n\ndef login_form() -> ui.element:\n    \"\"\"Create and return the Descope login form.\"\"\"\n    with ui.card().classes('w-96 mx-auto'):\n        return ui.element('descope-wc').props(f'project-id=\"{DESCOPE_ID}\" flow-id=\"sign-up-or-in\"') \\\n            .on('success', lambda e: app.storage.user.update({'descope': e.args['detail']['user']}))\n\n\ndef about() -> dict[str, Any]:\n    \"\"\"Return the user's Descope profile.\n\n    This function can only be used after the user has logged in.\n    \"\"\"\n    return app.storage.user['descope']\n\n\nasync def logout() -> None:\n    \"\"\"Logout the user.\"\"\"\n    result = await ui.run_javascript('return await sdk.logout()')\n    if result['code'] == 200:\n        app.storage.user['descope'] = None\n    else:\n        logging.error(f'Logout failed: {result}')\n        ui.notify('Logout failed', type='negative')\n    ui.navigate.to(page.LOGIN_PATH)\n\n\nclass page(ui.page):\n    \"\"\"A page that requires the user to be logged in.\n\n    It allows the same parameters as ui.page, but adds a login check.\n    As recommended by Descope, this is done via JavaScript and allows to use Flows.\n    But this means that the page has already awaited the client connection.\n    So `ui.add_head_html` will not work.\n    \"\"\"\n    SESSION_TOKEN_REFRESH_INTERVAL = 30\n    LOGIN_PATH = '/login'\n\n    def __call__(self, func: Callable[..., Any]) -> Callable[..., Any]:\n        async def content():\n            ui.add_head_html('<script src=\"https://unpkg.com/@descope/web-component@latest/dist/index.js\"></script>')\n            ui.add_head_html('<script src=\"https://unpkg.com/@descope/web-js-sdk@latest/dist/index.umd.js\"></script>')\n            ui.add_body_html(f'''\n                <script>\n                    const sdk = Descope({{ projectId: '{DESCOPE_ID}', persistTokens: true, autoRefresh: true }});\n                    const sessionToken = sdk.getSessionToken()\n                </script>\n            ''')\n            await ui.context.client.connected()\n            if await self._is_logged_in():\n                if self.path == self.LOGIN_PATH:\n                    self._refresh()\n                    ui.navigate.to('/')\n                    return\n            else:\n                if self.path != self.LOGIN_PATH:\n                    ui.navigate.to(self.LOGIN_PATH)\n                    return\n                ui.timer(self.SESSION_TOKEN_REFRESH_INTERVAL, self._refresh)\n\n            if helpers.is_coroutine_function(func):\n                await func()\n            else:\n                func()\n\n        return super().__call__(content)\n\n    @staticmethod\n    async def _is_logged_in() -> bool:\n        if not app.storage.user.get('descope'):\n            return False\n        token = await ui.run_javascript('return sessionToken && !sdk.isJwtExpired(sessionToken) ? sessionToken : null;')\n        if not token:\n            return False\n        try:\n            descope_client.validate_session(session_token=token)\n            return True\n        except AuthException:\n            logging.exception('Could not validate user session.')\n            ui.notify('Wrong username or password', type='negative')\n            return False\n\n    @staticmethod\n    def _refresh() -> None:\n        ui.run_javascript('sdk.refresh()')\n\n\ndef login_page(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"Marks the special page that will contain the login form.\"\"\"\n    return page(page.LOGIN_PATH)(func)"
  },
  {
    "instruction": "Example from NiceGUI: docker_image/app/main",
    "response": "import os\n\nfrom nicegui import app, ui\n\n\n@ui.page('/')\ndef index():\n    ui.textarea('This note is kept between visits') \\\n        .classes('w-96').bind_value(app.storage.user, 'note')\n\n\ndef handle_shutdown():\n    print('Shutdown has been initiated!')\n\n\napp.on_shutdown(handle_shutdown)\nui.run(storage_secret=os.environ['STORAGE_SECRET'])"
  },
  {
    "instruction": "Example from NiceGUI: download_text_as_file/main",
    "response": "import io\nimport uuid\n\nfrom fastapi.responses import StreamingResponse\n\nfrom nicegui import app, ui\n\n\n@ui.page('/')\nasync def index():\n    download_path = f'/download/{uuid.uuid4()}.txt'\n\n    @app.get(download_path)\n    def download():\n        string_io = io.StringIO(textarea.value)  # create a file-like object from the string\n        headers = {'Content-Disposition': 'attachment; filename=download.txt'}\n        return StreamingResponse(string_io, media_type='text/plain', headers=headers)\n\n    textarea = ui.textarea(value='Hello World!')\n    ui.button('Download', on_click=lambda: ui.download(download_path))\n\n    # cleanup the download route after the client disconnected\n    await ui.context.client.disconnected()\n    app.routes[:] = [route for route in app.routes if route.path != download_path]\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: editable_ag_grid/main",
    "response": "from nicegui import ui\n\n\ndef add_row():\n    new_id = max((dx['id'] for dx in aggrid.options['rowData']), default=-1) + 1\n    aggrid.options['rowData'].append({'id': new_id, 'name': 'New name', 'age': None})\n    ui.notify(f'Added row with ID {new_id}')\n\n\ndef handle_cell_value_change(e):\n    new_row = e.args['data']\n    ui.notify(f'Updated row to: {e.args[\"data\"]}')\n    aggrid.options['rowData'][:] = [row | new_row if row['id'] ==\n                                    new_row['id'] else row for row in aggrid.options['rowData']]\n\n\nasync def delete_selected():\n    selected_id = [row['id'] for row in await aggrid.get_selected_rows()]\n    aggrid.options['rowData'][:] = [row for row in aggrid.options['rowData'] if row['id'] not in selected_id]\n    ui.notify(f'Deleted row with ID {selected_id}')\n\naggrid = ui.aggrid({\n    'columnDefs': [\n        {'field': 'name', 'editable': True, 'sortable': True},\n        {'field': 'age', 'editable': True},\n        {'field': 'id'},\n    ],\n    'rowData': [\n        {'id': 0, 'name': 'Alice', 'age': 18},\n        {'id': 1, 'name': 'Bob', 'age': 21},\n        {'id': 2, 'name': 'Carol', 'age': 20},\n    ],\n    'rowSelection': {'mode': 'multiRow'},\n    'stopEditingWhenCellsLoseFocus': True,\n}).on('cellValueChanged', handle_cell_value_change)\n\nui.button('Delete selected', on_click=delete_selected)\nui.button('New row', on_click=add_row)\n\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: editable_table/main",
    "response": "from nicegui import events, ui\n\n\ndef add_row() -> None:\n    new_id = max((dx['id'] for dx in table.rows), default=-1) + 1\n    table.rows.append({'id': new_id, 'name': 'New guy', 'age': 21})\n    ui.notify(f'Added new row with ID {new_id}')\n    table.update()\n\n\ndef rename(e: events.GenericEventArguments) -> None:\n    for row in table.rows:\n        if row['id'] == e.args['id']:\n            row.update(e.args)\n    ui.notify(f'Updated rows to: {table.rows}')\n    table.update()\n\n\ndef delete(e: events.GenericEventArguments) -> None:\n    table.rows[:] = [row for row in table.rows if row['id'] != e.args['id']]\n    ui.notify(f'Deleted row with ID {e.args[\"id\"]}')\n    table.update()\n\n\ntable = ui.table(columns=[\n    {'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'},\n    {'name': 'age', 'label': 'Age', 'field': 'age'},\n], rows=[\n    {'id': 0, 'name': 'Alice', 'age': 18},\n    {'id': 1, 'name': 'Bob', 'age': 21},\n    {'id': 2, 'name': 'Carol', 'age': 20},\n], row_key='name').classes('w-60')\ntable.add_slot('header', r'''\n    <q-tr :props=\"props\">\n        <q-th auto-width />\n        <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\n            {{ col.label }}\n        </q-th>\n    </q-tr>\n''')\ntable.add_slot('body', r'''\n    <q-tr :props=\"props\">\n        <q-td auto-width >\n            <q-btn size=\"sm\" color=\"warning\" round dense icon=\"delete\"\n                @click=\"() => $parent.$emit('delete', props.row)\"\n            />\n        </q-td>\n        <q-td key=\"name\" :props=\"props\">\n            {{ props.row.name }}\n            <q-popup-edit v-model=\"props.row.name\" v-slot=\"scope\"\n                @update:model-value=\"() => $parent.$emit('rename', props.row)\"\n            >\n                <q-input v-model=\"scope.value\" dense autofocus counter @keyup.enter=\"scope.set\" />\n            </q-popup-edit>\n        </q-td>\n        <q-td key=\"age\" :props=\"props\">\n            {{ props.row.age }}\n            <q-popup-edit v-model=\"props.row.age\" v-slot=\"scope\"\n                @update:model-value=\"() => $parent.$emit('rename', props.row)\"\n            >\n                <q-input v-model.number=\"scope.value\" type=\"number\" dense autofocus counter @keyup.enter=\"scope.set\" />\n            </q-popup-edit>\n        </q-td>\n    </q-tr>\n''')\nwith table.add_slot('bottom-row'):\n    with table.cell().props('colspan=3'):\n        ui.button('Add row', icon='add', color='accent', on_click=add_row).classes('w-full')\ntable.on('rename', rename)\ntable.on('delete', delete)\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: fastapi/main",
    "response": "import uvicorn\nfrom fastapi import FastAPI\n\nfrom nicegui import app, ui\n\n# This example deliberately creates a separate FastAPI app and runs NiceGUI on top of it using `ui.run_with`.\n# Please note that the `app` object from NiceGUI is also a FastAPI app.\n# Often it is easier to stick to `ui.run` and use the `@app.get` etc. decorators to add normal FastAPI endpoints.\nfastapi_app = FastAPI()\n\n\n@fastapi_app.get('/')\ndef get_root():\n    return {'message': 'Hello, FastAPI! Browse to /gui to see the NiceGUI app.'}\n\n\n@ui.page('/')\ndef show():\n    ui.label('Hello, NiceGUI!')\n\n    # NOTE dark mode will be persistent for each user across tabs and server restarts\n    ui.dark_mode().bind_value(app.storage.user, 'dark_mode')\n    ui.checkbox('dark mode').bind_value(app.storage.user, 'dark_mode')\n\n\nui.run_with(\n    fastapi_app,\n    mount_path='/gui',  # NOTE this can be omitted if you want the paths passed to @ui.page to be at the root\n    storage_secret='pick your private secret here',  # NOTE setting a secret is optional but allows for persistent storage per user\n)\n\nif __name__ == '__main__':\n    uvicorn.run('main:fastapi_app', log_level='info', reload=True)"
  },
  {
    "instruction": "Example from NiceGUI: ffmpeg_extract_images/main",
    "response": "import shutil\nimport subprocess\nfrom pathlib import Path\n\nfrom nicegui import events, run, ui\n\nDATA_DIR = Path('data')\nDATA_DIR.mkdir(exist_ok=True)\n\n\nasync def handle_upload(args: events.UploadEventArguments):\n    if not args.file.content_type.startswith('video/'):\n        ui.notify('Please upload a video file')\n        return\n\n    shutil.rmtree(DATA_DIR, ignore_errors=True)\n    DATA_DIR.mkdir(exist_ok=True)\n\n    video_path = DATA_DIR / args.file.name\n    video_path.write_bytes(await args.file.read())\n\n    results.clear()\n    with results:\n        ui.spinner('dots', size='xl')\n\n    await run.io_bound(subprocess.call, ['ffmpeg', '-i', video_path, '-vf', 'fps=1', str(DATA_DIR / 'out_%04d.jpg')])\n\n    results.clear()\n    with results:\n        for image_path in DATA_DIR.glob('*.jpg'):\n            ui.image(image_path).classes('w-96 drop-shadow-md rounded')\n\n    upload.run_method('reset')\n\nwith ui.column().classes('w-full items-center'):\n    ui.label('Extract images from video').classes('text-3xl m-3')\n    upload = ui.upload(label='Pick a video file', auto_upload=True, on_upload=handle_upload)\n    results = ui.row().classes('w-full justify-center mt-6')\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: fullcalendar/fullcalendar",
    "response": "from pathlib import Path\nfrom typing import Any, Callable, Optional\n\nfrom nicegui.element import Element\nfrom nicegui.events import handle_event\n\n\nclass FullCalendar(Element, component='fullcalendar.js'):\n\n    def __init__(self, options: dict[str, Any], on_click: Optional[Callable] = None) -> None:\n        \"\"\"FullCalendar\n\n        An element that integrates the FullCalendar library (https://fullcalendar.io/) to create an interactive calendar display.\n        For an example of the FullCalendar library with plugins see https://github.com/dorel14/NiceGui-FullCalendar_more_Options\n\n        :param options: dictionary of FullCalendar properties for customization, such as \"initialView\", \"slotMinTime\", \"slotMaxTime\", \"allDaySlot\", \"timeZone\", \"height\", and \"events\".\n        :param on_click: callback that is called when a calendar event is clicked.\n        \"\"\"\n        super().__init__()\n        self.add_resource(Path(__file__).parent / 'lib')\n        self._props['options'] = options\n        self._update_method = 'update_calendar'\n\n        if on_click:\n            self.on('click', lambda e: handle_event(on_click, e))\n\n    def add_event(self, title: str, start: str, end: str, **kwargs) -> None:\n        \"\"\"Add an event to the calendar.\n\n        :param title: title of the event\n        :param start: start time of the event\n        :param end: end time of the event\n        \"\"\"\n        event_dict = {'title': title, 'start': start, 'end': end, **kwargs}\n        self._props['options']['events'].append(event_dict)\n\n    def remove_event(self, title: str, start: str, end: str) -> None:\n        \"\"\"Remove an event from the calendar.\n\n        :param title: title of the event\n        :param start: start time of the event\n        :param end: end time of the event\n        \"\"\"\n        for event in self._props['options']['events']:\n            if event['title'] == title and event['start'] == start and event['end'] == end:\n                self._props['options']['events'].remove(event)\n                break\n\n    @property\n    def events(self) -> list[dict]:\n        \"\"\"List of events currently displayed in the calendar.\"\"\"\n        return self._props['options']['events']"
  },
  {
    "instruction": "Example from NiceGUI: fullcalendar/main",
    "response": "from datetime import datetime\n\nfrom fullcalendar import FullCalendar as fullcalendar\n\nfrom nicegui import events, ui\n\noptions = {\n    'initialView': 'dayGridMonth',\n    'headerToolbar': {'left': 'title', 'right': ''},\n    'footerToolbar': {'right': 'prev,next today'},\n    'slotMinTime': '05:00:00',\n    'slotMaxTime': '22:00:00',\n    'allDaySlot': False,\n    'timeZone': 'local',\n    'height': 'auto',\n    'width': 'auto',\n    'events': [\n        {\n            'title': 'Math',\n            'start': datetime.now().strftime(r'%Y-%m-%d') + ' 08:00:00',\n            'end': datetime.now().strftime(r'%Y-%m-%d') + ' 10:00:00',\n            'color': 'red',\n        },\n        {\n            'title': 'Physics',\n            'start': datetime.now().strftime(r'%Y-%m-%d') + ' 10:00:00',\n            'end': datetime.now().strftime(r'%Y-%m-%d') + ' 12:00:00',\n            'color': 'green',\n        },\n        {\n            'title': 'Chemistry',\n            'start': datetime.now().strftime(r'%Y-%m-%d') + ' 13:00:00',\n            'end': datetime.now().strftime(r'%Y-%m-%d') + ' 15:00:00',\n            'color': 'blue',\n        },\n        {\n            'title': 'Biology',\n            'start': datetime.now().strftime(r'%Y-%m-%d') + ' 15:00:00',\n            'end': datetime.now().strftime(r'%Y-%m-%d') + ' 17:00:00',\n            'color': 'orange',\n        },\n    ],\n}\n\n\ndef handle_click(event: events.GenericEventArguments):\n    if 'info' in event.args:\n        ui.notify(event.args['info']['event'])\n\n\nfullcalendar(options, on_click=handle_click)\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: generate_pdf/main",
    "response": "from io import BytesIO\n\nimport cairo\nfrom html_sanitizer import Sanitizer\n\nfrom nicegui import ui\n\n\ndef generate_svg() -> str:\n    output = BytesIO()\n    surface = cairo.SVGSurface(output, 300, 200)\n    draw(surface)\n    surface.finish()\n    return output.getvalue().decode('utf-8')\n\n\ndef generate_pdf() -> bytes:\n    output = BytesIO()\n    surface = cairo.PDFSurface(output, 300, 200)\n    draw(surface)\n    surface.finish()\n    return output.getvalue()\n\n\ndef draw(surface: cairo.Surface) -> None:\n    context = cairo.Context(surface)\n    context.select_font_face('Arial', cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)\n    context.set_font_size(20)\n    context.move_to(10, 40)\n    context.show_text(name.value)\n    context.move_to(10, 80)\n    context.show_text(email.value)\n\n\ndef update() -> None:\n    preview.content = generate_svg()\n\n\nwith ui.row():\n    with ui.column():\n        name = ui.input('Name', placeholder='Enter your name', on_change=update)\n        email = ui.input('E-Mail', placeholder='Enter your E-Mail address', on_change=update)\n    preview = ui.html(sanitize=Sanitizer().sanitize).classes('border-2 border-gray-500')\n    update()\n    ui.button('PDF', on_click=lambda: ui.download(generate_pdf(), 'output.pdf')).bind_visibility_from(name, 'value')\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: global_worker/main",
    "response": "import asyncio\nimport time\nfrom collections.abc import Generator\nfrom multiprocessing import Manager\nfrom queue import Empty, Queue\nfrom typing import Callable\n\nfrom nicegui import app, background_tasks, run, ui\n\n\nclass Worker:\n\n    def __init__(self) -> None:\n        self._queue: Queue\n        self.progress: float = 0.0\n        self.is_running: bool = False\n\n        app.on_startup(self._create_queue)\n\n    async def run(self, func: Callable[..., Generator[float, None, None]]) -> None:\n        background_tasks.create(run.cpu_bound(self._run_generator, func, self._queue))\n        background_tasks.create(self._consume_queue())\n\n    @staticmethod\n    def _run_generator(func: Callable[..., Generator[float, None, None]], queue: Queue) -> None:\n        for progress in func():\n            queue.put({'progress': progress})\n        queue.put({'progress': 1.0})\n\n    def _create_queue(self) -> None:\n        self._queue = Manager().Queue()\n\n    async def _consume_queue(self) -> None:\n        self.is_running = True\n        self.progress = 0.0\n        while self.progress < 1.0:\n            try:\n                msg = self._queue.get_nowait()\n            except Empty:\n                await asyncio.sleep(0.1)\n                continue\n            self.progress = msg['progress']\n        self.is_running = False\n\n\ndef heavy_computation() -> Generator[float, None, None]:\n    n = 50\n    for i in range(n):\n        time.sleep(0.1)\n        yield i / n\n\n\nworker = Worker()\n\n\n@ui.page('/')\ndef main_page():\n    ui.button('compute', on_click=lambda: worker.run(heavy_computation))\n    ui.linear_progress().props('instant-feedback') \\\n        .bind_value_from(worker, 'progress') \\\n        .bind_visibility_from(worker, 'is_running')\n\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: google_oauth2/main",
    "response": "import logging\nimport time\nfrom typing import Optional\n\nfrom authlib.integrations.starlette_client import OAuth, OAuthError\nfrom fastapi import Request\nfrom starlette.responses import RedirectResponse\n\nfrom nicegui import app, ui\n\n# Get the credentials from the Google Cloud Console.\n# See https://developers.google.com/identity/gsi/web/guides/get-google-api-clientid#get_your_google_api_client_id.\n# For local development, you should add http://localhost:8080 to the authorized JavaScript origins.\n# In production, you should add the domain of your website to the authorized JavaScript origins.\n# Make sure you include <origin>/auth in \"Authorized redirect URIs\".\nGOOGLE_CLIENT_ID = '...'\nGOOGLE_CLIENT_SECRET = '...'\n\noauth = OAuth()\noauth.register(\n    name='google',\n    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\n    client_id=GOOGLE_CLIENT_ID,\n    client_secret=GOOGLE_CLIENT_SECRET,\n    client_kwargs={'scope': 'openid email profile'},\n)\n\n\n@ui.page('/')\nasync def main(request: Request) -> Optional[RedirectResponse]:\n    user_info = app.storage.user.get('user_info', {})\n    if not _is_valid(user_info):\n        app.storage.user.pop('user_info', None)\n        return await oauth.google.authorize_redirect(request, request.url_for('google_oauth'))\n\n    ui.label(f'Welcome {user_info.get(\"name\") or user_info.get(\"email\", \"\")}!')\n    ui.button('Logout', on_click=logout)\n    return None\n\n\ndef logout() -> None:\n    del app.storage.user['user_info']\n    ui.navigate.to('/')\n\n\n@app.get('/auth')\nasync def google_oauth(request: Request) -> RedirectResponse:\n    try:\n        user_info = (await oauth.google.authorize_access_token(request)).get('userinfo', {})\n        if _is_valid(user_info):\n            app.storage.user['user_info'] = user_info\n    except (OAuthError, Exception):\n        logging.exception('could not authorize access token')\n    return RedirectResponse('/')\n\n\ndef _is_valid(user_info: dict) -> bool:\n    try:\n        return all([\n            int(user_info.get('exp', 0)) > int(time.time()),\n            user_info.get('aud') == GOOGLE_CLIENT_ID,\n            user_info.get('iss') in {'https://accounts.google.com', 'accounts.google.com'},\n            str(user_info.get('email_verified')).lower() == 'true',\n        ])\n    except Exception:\n        return False\n\n\nui.run(\n    host='localhost',  # NOTE: this ensures that you can run the app locally, accessing via http://127.0.0.1:8080 is not supported by Google OAuth2\n    storage_secret='random secret goes here',\n)"
  },
  {
    "instruction": "Example from NiceGUI: google_one_tap_auth/main",
    "response": "import time\n\nimport httpx\nfrom fastapi import Form, HTTPException\nfrom fastapi.responses import RedirectResponse\n\nfrom nicegui import app, ui\n\n# Get your Google Client ID from the Google Cloud Console.\n# See https://developers.google.com/identity/gsi/web/guides/get-google-api-clientid#get_your_google_api_client_id.\n# For local development, you should add http://localhost:8080 to the authorized JavaScript origins.\n# In production, you should add the domain of your website to the authorized JavaScript origins.\n# Make sure you include <origin>/auth in \"Authorized redirect URIs\".\nGOOGLE_CLIENT_ID = '...'\n\n\n@ui.page('/')\ndef main_page() -> None:\n    user_info = app.storage.user.get('user_info', {})\n    if not _is_valid(user_info):\n        ui.add_head_html('<script src=\"https://accounts.google.com/gsi/client\" async defer></script>')\n        ui.html(f'''\n            <div id=\"g_id_onload\"\n                data-client_id=\"{GOOGLE_CLIENT_ID}\"\n                data-login_uri=\"http://localhost:8080/auth\">\n            </div>\n        ''', sanitize=False)\n        ui.label('Sign in with Google One Tap')\n        return\n\n    ui.label(f'Welcome {user_info.get(\"name\") or user_info.get(\"email\", \"\")}!')\n    ui.button('Logout', on_click=logout)\n\n\ndef logout() -> None:\n    del app.storage.user['user_info']\n    ui.navigate.to('/')\n\n\n@app.post('/auth')\nasync def google_auth(credential: str = Form(...)) -> RedirectResponse:\n    async with httpx.AsyncClient() as http_client:\n        response = await http_client.get(f'https://oauth2.googleapis.com/tokeninfo?id_token={credential}')\n    if response.status_code != 200:\n        raise HTTPException(status_code=400, detail='Invalid token')\n    user_info = response.json()\n    if not _is_valid(user_info):\n        raise HTTPException(status_code=400, detail='Invalid token claims')\n    app.storage.user['user_info'] = user_info\n    return RedirectResponse('/', status_code=303)\n\n\ndef _is_valid(user_info: dict) -> bool:\n    try:\n        return all([\n            int(user_info.get('exp', 0)) > int(time.time()),\n            user_info.get('aud') == GOOGLE_CLIENT_ID,\n            user_info.get('iss') in {'https://accounts.google.com', 'accounts.google.com'},\n            str(user_info.get('email_verified')).lower() == 'true',\n        ])\n    except Exception:\n        return False\n\n\nui.run(\n    host='localhost',  # NOTE: this ensures that you can run the app locally, accessing via http://127.0.0.1:8080 is not supported by Google OAuth2\n    storage_secret='random secret goes here',\n)"
  },
  {
    "instruction": "Example from NiceGUI: image_mask_overlay/main",
    "response": "from nicegui import app, ui\n\napp.add_static_files('/images', '.')\n\nimg_src = '/images/PpIqU.png'\nmask_src = '/images/OfwWp.png'\n\nwith ui.row().classes('w-full flex items-center'):\n    ui.image(img_src).style('width: 25%')\n    ui.label('+').style('font-size: 18em')\n    ui.image(mask_src).style('width: 25%')\n    ui.label('=').style('font-size: 18em')\n    image = ui.interactive_image(img_src).style('width: 25%')\n    image.content = f'''\n        <image xlink:href=\"{mask_src}\" width=\"100%\" height=\"100%\" x=\"0\" y=\"0\" filter=\"url(#mask)\" />\n        <filter id=\"mask\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope=\"40\" />\n                <feFuncG type=\"linear\" slope=\"40\" />\n                <feFuncB type=\"linear\" slope=\"40\" />\n                <feFuncR type=\"linear\" slope=\"1000\" />\n            </feComponentTransfer>\n            <feColorMatrix type=\"matrix\" values=\"1 0 0 0 0   0 1 0 0 0   0 0 1 0 0  3 -1 -1 0 0\" />\n        </filter>\n    '''\nui.markdown(\n    'Images where discovered through <https://stackoverflow.com/a/57579290/364388>. '\n    'SVG filters where used to colorize the mask. You may want to check out <https://webplatform.github.io/docs/svg/tutorials/smarter_svg_filters/>.'\n).classes('mt-4')\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: infinite_scroll/main",
    "response": "import time\n\nfrom nicegui import ui\n\n\n@ui.page('/')\nasync def page():\n    async def check():\n        try:\n            if await ui.run_javascript('window.pageYOffset >= document.body.offsetHeight - 2 * window.innerHeight'):\n                ui.image(f'https://picsum.photos/640/360?{time.time()}')\n        except TimeoutError:\n            pass  # the client might have disconnected\n    await ui.context.client.connected()\n    ui.timer(0.1, check)\n\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: lightbox/main",
    "response": "import httpx\n\nfrom nicegui import events, ui\n\n\nclass Lightbox:\n    \"\"\"A thumbnail gallery where each image can be clicked to enlarge.\n    Inspired by https://lokeshdhakar.com/projects/lightbox2/.\n    \"\"\"\n\n    def __init__(self) -> None:\n        with ui.dialog().props('maximized').classes('bg-black') as self.dialog:\n            ui.keyboard(self._handle_key)\n            self.large_image = ui.image().props('no-spinner fit=scale-down')\n        self.image_list: list[str] = []\n\n    def add_image(self, thumb_url: str, orig_url: str) -> ui.image:\n        \"\"\"Place a thumbnail image in the UI and make it clickable to enlarge.\"\"\"\n        self.image_list.append(orig_url)\n        with ui.button(on_click=lambda: self._open(orig_url)).props('flat dense square'):\n            return ui.image(thumb_url)\n\n    def _handle_key(self, event_args: events.KeyEventArguments) -> None:\n        if not event_args.action.keydown:\n            return\n        if event_args.key.escape:\n            self.dialog.close()\n        image_index = self.image_list.index(self.large_image.source)\n        if event_args.key.arrow_left and image_index > 0:\n            self._open(self.image_list[image_index - 1])\n        if event_args.key.arrow_right and image_index < len(self.image_list) - 1:\n            self._open(self.image_list[image_index + 1])\n\n    def _open(self, url: str) -> None:\n        self.large_image.set_source(url)\n        self.dialog.open()\n\n\n@ui.page('/')\nasync def page():\n    lightbox = Lightbox()\n    async with httpx.AsyncClient() as client:  # using async httpx instead of sync requests to avoid blocking the event loop\n        images = await client.get('https://picsum.photos/v2/list?page=4&limit=30')\n    with ui.row().classes('w-full'):\n        for image in images.json():  # picsum returns a list of images as json data\n            # we can use the image ID to construct the image URLs\n            image_base_url = f'https://picsum.photos/id/{image[\"id\"]}'\n            # the lightbox allows us to add images which can be opened in a full screen dialog\n            lightbox.add_image(\n                thumb_url=f'{image_base_url}/300/200',\n                orig_url=f'{image_base_url}/{image[\"width\"]}/{image[\"height\"]}',\n            ).classes('w-[300px] h-[200px]')\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: local_file_picker/local_file_picker",
    "response": "import platform\nfrom pathlib import Path\nfrom typing import Optional\n\nfrom nicegui import events, ui\n\n\nclass local_file_picker(ui.dialog):\n\n    def __init__(self, directory: str, *,\n                 upper_limit: Optional[str] = ..., multiple: bool = False, show_hidden_files: bool = False) -> None:\n        \"\"\"Local File Picker\n\n        This is a simple file picker that allows you to select a file from the local filesystem where NiceGUI is running.\n\n        :param directory: The directory to start in.\n        :param upper_limit: The directory to stop at (None: no limit, default: same as the starting directory).\n        :param multiple: Whether to allow multiple files to be selected.\n        :param show_hidden_files: Whether to show hidden files.\n        \"\"\"\n        super().__init__()\n\n        self.path = Path(directory).expanduser()\n        if upper_limit is None:\n            self.upper_limit = None\n        else:\n            self.upper_limit = Path(directory if upper_limit == ... else upper_limit).expanduser()\n        self.show_hidden_files = show_hidden_files\n\n        with self, ui.card():\n            self.add_drives_toggle()\n            self.grid = ui.aggrid({\n                'columnDefs': [{'field': 'name', 'headerName': 'File'}],\n                'rowSelection': {'mode': 'multiRow' if multiple else 'singleRow'},\n            }, html_columns=[0]).classes('w-96').on('cellDoubleClicked', self.handle_double_click)\n            with ui.row().classes('w-full justify-end'):\n                ui.button('Cancel', on_click=self.close).props('outline')\n                ui.button('Ok', on_click=self._handle_ok)\n        self.update_grid()\n\n    def add_drives_toggle(self):\n        if platform.system() == 'Windows':\n            import win32api\n            drives = win32api.GetLogicalDriveStrings().split('\\000')[:-1]\n            self.drives_toggle = ui.toggle(drives, value=drives[0], on_change=self.update_drive)\n\n    def update_drive(self):\n        self.path = Path(self.drives_toggle.value).expanduser()\n        self.update_grid()\n\n    def update_grid(self) -> None:\n        paths = list(self.path.glob('*'))\n        if not self.show_hidden_files:\n            paths = [p for p in paths if not p.name.startswith('.')]\n        paths.sort(key=lambda p: p.name.lower())\n        paths.sort(key=lambda p: not p.is_dir())\n\n        self.grid.options['rowData'] = [\n            {\n                'name': f'📁 <strong>{p.name}</strong>' if p.is_dir() else p.name,\n                'path': str(p),\n            }\n            for p in paths\n        ]\n        if (self.upper_limit is None and self.path != self.path.parent) or \\\n                (self.upper_limit is not None and self.path != self.upper_limit):\n            self.grid.options['rowData'].insert(0, {\n                'name': '📁 <strong>..</strong>',\n                'path': str(self.path.parent),\n            })\n        self.grid.update()\n\n    def handle_double_click(self, e: events.GenericEventArguments) -> None:\n        self.path = Path(e.args['data']['path'])\n        if self.path.is_dir():\n            self.update_grid()\n        else:\n            self.submit([str(self.path)])\n\n    async def _handle_ok(self):\n        rows = await self.grid.get_selected_rows()\n        self.submit([r['path'] for r in rows])"
  },
  {
    "instruction": "Example from NiceGUI: local_file_picker/main",
    "response": "from local_file_picker import local_file_picker\n\nfrom nicegui import ui\n\n\nasync def pick_file() -> None:\n    result = await local_file_picker('~', multiple=True)\n    ui.notify(f'You chose {result}')\n\n\n@ui.page('/')\ndef index():\n    ui.button('Choose file', on_click=pick_file, icon='folder')\n\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: menu_and_tabs/main",
    "response": "from nicegui import ui\n\nwith ui.header().classes(replace='row items-center') as header:\n    ui.button(on_click=lambda: left_drawer.toggle(), icon='menu').props('flat color=white')\n    with ui.tabs() as tabs:\n        ui.tab('A')\n        ui.tab('B')\n        ui.tab('C')\n\nwith ui.footer(value=False) as footer:\n    ui.label('Footer')\n\nwith ui.left_drawer().classes('bg-blue-100') as left_drawer:\n    ui.label('Side menu')\n\nwith ui.page_sticky(position='bottom-right', x_offset=20, y_offset=20):\n    ui.button(on_click=footer.toggle, icon='contact_support').props('fab')\n\nwith ui.tab_panels(tabs, value='A').classes('w-full'):\n    with ui.tab_panel('A'):\n        ui.label('Content of A')\n    with ui.tab_panel('B'):\n        ui.label('Content of B')\n    with ui.tab_panel('C'):\n        ui.label('Content of C')\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: modularization/api_router_example",
    "response": "import theme\nfrom message import message\n\nfrom nicegui import APIRouter, ui\n\n# NOTE: the APIRouter does not yet work with NiceGUI On Air (see https://github.com/zauberzeug/nicegui/discussions/2792)\nrouter = APIRouter(prefix='/c')\n\n\n@router.page('/')\ndef example_page():\n    with theme.frame('- Page C -'):\n        message('Page C')\n        ui.label('This page and its subpages are created using an APIRouter.')\n        ui.link('Item 1', '/c/items/1').classes('text-xl text-grey-8')\n        ui.link('Item 2', '/c/items/2').classes('text-xl text-grey-8')\n        ui.link('Item 3', '/c/items/3').classes('text-xl text-grey-8')\n\n\n@router.page('/items/{item_id}', dark=True)\ndef item(item_id: str):\n    with theme.frame(f'- Page C{item_id} -'):\n        message(f'Item  #{item_id}')\n        ui.link('go back', router.prefix).classes('text-xl text-grey-8')"
  },
  {
    "instruction": "Example from NiceGUI: modularization/class_example",
    "response": "import theme\nfrom message import message\n\nfrom nicegui import ui\n\n\nclass ClassExample:\n\n    def __init__(self) -> None:\n        \"\"\"The page is created as soon as the class is instantiated.\n\n        This can obviously also be done in a method, if you want to decouple the instantiation of the object from the page creation.\n        \"\"\"\n        @ui.page('/b')\n        def page_b():\n            with theme.frame('- Page B -'):\n                message('Page B')\n                ui.label('This page is defined in a class.')"
  },
  {
    "instruction": "Example from NiceGUI: modularization/function_example",
    "response": "import theme\nfrom message import message\n\nfrom nicegui import ui\n\n\ndef create() -> None:\n    @ui.page('/a')\n    def page_a():\n        with theme.frame('- Page A -'):\n            message('Page A')\n            ui.label('This page is defined in a function.')"
  },
  {
    "instruction": "Example from NiceGUI: modularization/home_page",
    "response": "from message import message\n\nfrom nicegui import ui\n\n\ndef content() -> None:\n    message('This is the home page.').classes('font-bold')\n    ui.label('Use the menu on the top right to navigate.')"
  },
  {
    "instruction": "Example from NiceGUI: modularization/main",
    "response": "import api_router_example\nimport class_example\nimport function_example\nimport home_page\nimport theme\n\nfrom nicegui import app, ui\n\n\n# Example 1: use a custom page decorator directly and putting the content creation into a separate function\n@ui.page('/')\ndef index_page() -> None:\n    with theme.frame('Homepage'):\n        home_page.content()\n\n\n# Example 2: use a function to move the whole page creation into a separate file\nfunction_example.create()\n\n# Example 3: use a class to move the whole page creation into a separate file\nclass_example.ClassExample()\n\n# Example 4: use APIRouter as described in https://nicegui.io/documentation/page#modularize_with_apirouter\napp.include_router(api_router_example.router)\n\nui.run(title='Modularization Example')"
  },
  {
    "instruction": "Example from NiceGUI: modularization/menu",
    "response": "from nicegui import ui\n\n\ndef menu() -> None:\n    ui.link('Home', '/').classes(replace='text-white')\n    ui.link('A', '/a').classes(replace='text-white')\n    ui.link('B', '/b').classes(replace='text-white')\n    ui.link('C', '/c').classes(replace='text-white')"
  },
  {
    "instruction": "Example from NiceGUI: modularization/message",
    "response": "from nicegui import ui\n\n\nclass message(ui.label):\n\n    def __init__(self, text: str) -> None:\n        super().__init__(text)\n        self.classes('text-h4 text-grey-8')"
  },
  {
    "instruction": "Example from NiceGUI: modularization/theme",
    "response": "from contextlib import contextmanager\n\nfrom menu import menu\n\nfrom nicegui import ui\n\n\n@contextmanager\ndef frame(navigation_title: str):\n    \"\"\"Custom page frame to share the same styling and behavior across all pages\"\"\"\n    ui.colors(primary='#6E93D6', secondary='#53B689', accent='#111B1E', positive='#53B689')\n    with ui.header():\n        ui.label('Modularization Example').classes('font-bold')\n        ui.space()\n        ui.label(navigation_title)\n        ui.space()\n        with ui.row():\n            menu()\n    with ui.column().classes('absolute-center items-center'):\n        yield"
  },
  {
    "instruction": "Example from NiceGUI: nginx_https/app/main",
    "response": "from nicegui import ui\n\nui.label('Hello HTTPS encrypted world')\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: nginx_subpath/app/main",
    "response": "from nicegui import ui\n\n\n@ui.page('/subpage')\ndef subpage():\n    ui.label('This is a subpage').classes('text-h5 mx-auto mt-24')\n    ui.link('Navigate to the index page.', '/').classes('text-lg mx-auto')\n    ui.button('back', on_click=lambda: ui.navigate.to('/')).classes('mx-auto')\n\n\n@ui.page('/')\ndef index():\n    with ui.card().classes('mx-auto p-24 items-center text-center'):\n        ui.label('This demonstrates hosting of a NiceGUI app on a subpath.').classes('text-h5')\n        ui.label('As you can see the entire app is available below \"/nicegui\".').classes('text-lg')\n        ui.label('But the code here does not need to know that.').classes('text-lg')\n        ui.link('Navigate to a subpage.', 'subpage').classes('text-lg')\n\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: node_module_integration/main",
    "response": "from number_checker import NumberChecker\n\nfrom nicegui import ui\n\n\n@ui.page('/')\ndef page():\n    number_checker = NumberChecker()\n    number = ui.number(value=42.0)\n\n    async def check():\n        even = await number_checker.is_even(number.value)\n        ui.notify(f'{number.value} is {\"even\" if even else \"odd\"}')\n\n    ui.button('Check', on_click=check)\n\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: node_module_integration/number_checker",
    "response": "from nicegui import ui\n\n\nclass NumberChecker(ui.element, component='number_checker.js', esm={'is-odd': 'dist'}):\n\n    def __init__(self) -> None:\n        \"\"\"NumberChecker\n\n        A number checker based on the `is-odd <https://www.npmjs.com/package/is-odd>`_ NPM package.\n        \"\"\"\n        super().__init__()\n\n    async def is_odd(self, number: int) -> bool:\n        \"\"\"Check if a number is odd.\"\"\"\n        return await self.run_method('isOdd', number)\n\n    async def is_even(self, number: int) -> bool:\n        \"\"\"Check if a number is even.\"\"\"\n        return await self.run_method('isEven', number)"
  },
  {
    "instruction": "Example from NiceGUI: openai_assistant/main",
    "response": "from openai import AsyncOpenAI\nfrom openai.types.beta.assistant_stream_event import ThreadMessageInProgress\nfrom openai.types.beta.threads import MessageDeltaEvent, TextDeltaBlock\n\nfrom nicegui import ui\n\nclient = AsyncOpenAI(api_key='provide your OpenAI API key here')\n\n\n@ui.page('/')\nasync def main():\n    assistant = await client.beta.assistants.create(\n        name='NiceGUI Assistant',\n        instructions='''\n            You are a personal assistant for NiceGUI developers.\n            Your sole focus is to help with questions about the NiceGUI framework.\n            You are precise and concise.\n            Stay on the topic.\n            Very short answers are preferred, but always be friendly and polite.\n        ''',\n        tools=[{'type': 'code_interpreter'}],\n        model='gpt-4o-mini',\n    )\n\n    thread = await client.beta.threads.create()\n\n    async def send() -> None:\n        response.content = ''\n        spinner = ui.spinner(size='5em', type='comment').classes('mx-auto')\n        await client.beta.threads.messages.create(\n            thread_id=thread.id,\n            role='user',\n            content=question.value,\n        )\n        stream = await client.beta.threads.runs.create(\n            assistant_id=assistant.id,\n            thread_id=thread.id,\n            stream=True,\n        )\n        async for chunk in stream:\n            if isinstance(chunk, ThreadMessageInProgress):\n                spinner.delete()\n            # NOTE: the stream contains a lot of different types so we need to filter out the ones we don't need\n            if not isinstance(chunk.data, MessageDeltaEvent) or not chunk.data.delta.content:\n                continue\n            content = chunk.data.delta.content[0]\n            if not isinstance(content, TextDeltaBlock) or content.text is None or content.text.value is None:\n                continue\n            response.content += content.text.value\n\n    with ui.column().classes('mx-auto w-full max-w-xl my-16'):\n        ui.label('NiceGUI Assistant').classes('text-2xl font-bold mx-auto')\n        question = ui.input(value='Why does NiceGUI use async/await?') \\\n            .classes('w-full self-center mt-4').props('hint=\"Ask your question\" dense') \\\n            .on('keydown.enter', send)\n        response = ui.markdown().classes('mx-4 mt-2')\n        ui.timer(0, send, once=True)  # NOTE: we send the prepared demo question immediately\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: opencv_webcam/main",
    "response": "import base64\nimport signal\n\nimport cv2\nimport numpy as np\nfrom fastapi import Response\n\nfrom nicegui import Client, app, core, run, ui\n\n# In case you don't have a webcam, this will provide a black placeholder image.\nblack_1px = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAA1JREFUGFdjYGBg+A8AAQQBAHAgZQsAAAAASUVORK5CYII='\nplaceholder = Response(content=base64.b64decode(black_1px.encode('ascii')), media_type='image/png')\n\n\ndef convert(frame: np.ndarray) -> bytes:\n    \"\"\"Converts a frame from OpenCV to a JPEG image.\n\n    This is a free function (not in a class or inner-function),\n    to allow run.cpu_bound to pickle it and send it to a separate process.\n    \"\"\"\n    _, imencode_image = cv2.imencode('.jpg', frame)\n    return imencode_image.tobytes()\n\n\ndef setup() -> None:\n    # OpenCV is used to access the webcam.\n    video_capture = cv2.VideoCapture(0)\n\n    @app.get('/video/frame')\n    # Thanks to FastAPI's `app.get` it is easy to create a web route which always provides the latest image from OpenCV.\n    async def grab_video_frame() -> Response:\n        if not video_capture.isOpened():\n            return placeholder\n        # The `video_capture.read` call is a blocking function.\n        # So we run it in a separate thread (default executor) to avoid blocking the event loop.\n        _, frame = await run.io_bound(video_capture.read)\n        if frame is None:\n            return placeholder\n        # `convert` is a CPU-intensive function, so we run it in a separate process to avoid blocking the event loop and GIL.\n        jpeg = await run.cpu_bound(convert, frame)\n        return Response(content=jpeg, media_type='image/jpeg')\n\n    @ui.page('/')\n    def page():\n        # For non-flickering image updates and automatic bandwidth adaptation an interactive image is much better than `ui.image()`.\n        video_image = ui.interactive_image('/video/frame').classes('w-full h-full')\n        # A timer constantly updates the source of the image.\n        ui.timer(interval=0.1, callback=video_image.force_reload)\n\n    async def disconnect() -> None:\n        \"\"\"Disconnect all clients from current running server.\"\"\"\n        for client_id in Client.instances:\n            await core.sio.disconnect(client_id)\n\n    def handle_sigint(signum, frame) -> None:\n        # `disconnect` is async, so it must be called from the event loop; we use `ui.timer` to do so.\n        ui.timer(0.1, disconnect, once=True)\n        # Delay the default handler to allow the disconnect to complete.\n        ui.timer(1, lambda: signal.default_int_handler(signum, frame), once=True)\n\n    async def cleanup() -> None:\n        # This prevents ugly stack traces when auto-reloading on code change,\n        # because otherwise disconnected clients try to reconnect to the newly started server.\n        await disconnect()\n        # Release the webcam hardware so it can be used by other applications again.\n        video_capture.release()\n\n    app.on_shutdown(cleanup)\n    # We also need to disconnect clients when the app is stopped with Ctrl+C,\n    # because otherwise they will keep requesting images which lead to unfinished subprocesses blocking the shutdown.\n    signal.signal(signal.SIGINT, handle_sigint)\n\n\n# All the setup is only done when the server starts. This avoids the webcam being accessed\n# by the auto-reload main process (see https://github.com/zauberzeug/nicegui/discussions/2321).\napp.on_startup(setup)\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: pandas_dataframe/main",
    "response": "import pandas as pd\nfrom pandas.api.types import is_bool_dtype, is_numeric_dtype\n\nfrom nicegui import ui\n\ndf = pd.DataFrame(data={\n    'col1': [x for x in range(4)],\n    'col2': ['This', 'column', 'contains', 'strings.'],\n    'col3': [x / 4 for x in range(4)],\n    'col4': [True, False, True, False],\n})\n\n\ndef update(*, df: pd.DataFrame, r: int, c: int, value):\n    df.iat[r, c] = value\n    ui.notify(f'Set ({r}, {c}) to {value}')\n\n\nwith ui.grid(rows=len(df.index)+1).classes('grid-flow-col'):\n    for c, col in enumerate(df.columns):\n        ui.label(col).classes('font-bold')\n        for r, row in enumerate(df.loc[:, col]):\n            if is_bool_dtype(df[col].dtype):\n                cls = ui.checkbox\n            elif is_numeric_dtype(df[col].dtype):\n                cls = ui.number\n            else:\n                cls = ui.input\n            cls(value=row, on_change=lambda event, r=r, c=c: update(df=df, r=r, c=c, value=event.value))\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: progress/main",
    "response": "import time\nfrom multiprocessing import Manager, Queue\n\nfrom nicegui import run, ui\n\n\ndef heavy_computation(q: Queue) -> str:\n    \"\"\"Run some heavy computation that updates the progress bar through the queue.\"\"\"\n    n = 50\n    for i in range(n):\n        # Perform some heavy computation\n        time.sleep(0.1)\n\n        # Update the progress bar through the queue\n        q.put_nowait(i / n)\n    return 'Done!'\n\n\n@ui.page('/')\ndef main_page():\n    async def start_computation():\n        progressbar.visible = True\n        result = await run.cpu_bound(heavy_computation, queue)\n        ui.notify(result)\n        progressbar.visible = False\n\n    # Create a queue to communicate with the heavy computation process\n    queue = Manager().Queue()\n    # Update the progress bar on the main process\n    ui.timer(0.1, callback=lambda: progressbar.set_value(queue.get() if not queue.empty() else progressbar.value))\n\n    # Create the UI\n    ui.button('compute', on_click=start_computation)\n    progressbar = ui.linear_progress(value=0).props('instant-feedback')\n    progressbar.visible = False\n\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: pyserial/main",
    "response": "import serial\n\nfrom nicegui import app, run, ui\n\nport = serial.Serial('/dev/tty.SLAB_USBtoUART', baudrate=115200, timeout=0.1)\n\nui.input('Send command').on('keydown.enter', lambda e: (\n    port.write(f'{e.sender.value}\\n'.encode()),\n    e.sender.set_value(''),\n))\nlog = ui.log()\n\n\nasync def read_loop() -> None:\n    while not app.is_stopped:\n        line = await run.io_bound(port.readline)\n        if line:\n            log.push(line.decode())\n\napp.on_startup(read_loop)\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: pytests/app/__init__",
    "response": ""
  },
  {
    "instruction": "Example from NiceGUI: pytests/app/startup",
    "response": "from nicegui import Client, ui\n\n# pylint: disable=missing-function-docstring\n\n\ndef startup() -> None:\n    @ui.page('/')\n    def main_page() -> None:\n        ui.markdown('Try running `pytest` on this project!')\n        ui.button('Click me', on_click=lambda: ui.notify('Button clicked!'))\n        ui.link('go to subpage', '/subpage')\n\n    @ui.page('/subpage')\n    def sub_page() -> None:\n        ui.markdown('This is a subpage')\n\n    @ui.page('/with_connected')\n    async def with_connected(client: Client) -> None:\n        ui.markdown('This is an async connection demo')\n        await client.connected()\n        ui.markdown('Connected!')"
  },
  {
    "instruction": "Example from NiceGUI: pytests/main",
    "response": "from app.startup import startup\n\nfrom nicegui import app, ui\n\napp.on_startup(startup)\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: pytests/tests/__init__",
    "response": ""
  },
  {
    "instruction": "Example from NiceGUI: pytests/tests/test_with_screen",
    "response": "from nicegui.testing import Screen\n\n# pylint: disable=missing-function-docstring\n\n\ndef test_markdown_message(screen: Screen) -> None:\n    screen.open('/')\n    screen.should_contain('Try running')\n\n\ndef test_button_click(screen: Screen) -> None:\n    screen.open('/')\n    screen.click('Click me')\n    screen.should_contain('Button clicked!')\n\n\ndef test_sub_page(screen: Screen) -> None:\n    screen.open('/subpage')\n    screen.should_contain('This is a subpage')\n\n\ndef test_with_connected(screen: Screen) -> None:\n    screen.open('/with_connected')\n    screen.should_contain('This is an async connection demo')\n    screen.should_contain('Connected!')\n\n\ndef test_navigation(screen: Screen) -> None:\n    screen.open('/')\n    screen.click('go to subpage')\n    screen.should_contain('This is a subpage')"
  },
  {
    "instruction": "Example from NiceGUI: pytests/tests/test_with_user",
    "response": "from nicegui.testing import User\n\n# pylint: disable=missing-function-docstring\n\n\nasync def test_markdown_message(user: User) -> None:\n    await user.open('/')\n    await user.should_see('Try running')\n\n\nasync def test_button_click(user: User) -> None:\n    await user.open('/')\n    user.find('Click me').click()\n    await user.should_see('Button clicked!')\n\n\nasync def test_sub_page(user: User) -> None:\n    await user.open('/subpage')\n    await user.should_see('This is a subpage')\n\n\nasync def test_with_connected(user: User) -> None:\n    await user.open('/with_connected')\n    await user.should_see('This is an async connection demo')\n    await user.should_see('Connected!')\n\n\nasync def test_navigation(user: User) -> None:\n    await user.open('/')\n    user.find('go to subpage').click()\n    await user.should_see('This is a subpage')"
  },
  {
    "instruction": "Example from NiceGUI: redis_storage/main",
    "response": "from nicegui import app, ui\n\n\n@ui.page('/')\nasync def index():\n    ui.input('general').bind_value(app.storage.general, 'text')\n    ui.input('user').bind_value(app.storage.user, 'text')\n    await ui.context.client.connected()\n    ui.input('tab').bind_value(app.storage.tab, 'text')\n\n\nui.run(storage_secret='your private key to secure the browser session cookie')"
  },
  {
    "instruction": "Example from NiceGUI: ros2/ros2_ws/src/gui/gui/__init__",
    "response": ""
  },
  {
    "instruction": "Example from NiceGUI: ros2/ros2_ws/src/gui/gui/node",
    "response": "import math\nimport threading\nfrom pathlib import Path\n\nimport rclpy\nfrom geometry_msgs.msg import Pose, Twist\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nfrom nicegui import Event, app, ui, ui_run\n\n\nclass NiceGuiNode(Node):\n\n    def __init__(self) -> None:\n        super().__init__('nicegui')\n        self.pose_update = Event()\n        self.speed_update = Event()\n\n        self.cmd_vel_publisher = self.create_publisher(Twist, 'cmd_vel', 1)\n        self.subscription = self.create_subscription(Pose, 'pose', self.pose_update.emit, 1)\n\n        @ui.page('/')\n        def page():\n            with ui.row().classes('items-stretch'):\n                with ui.card().classes('w-44 text-center items-center'):\n                    ui.label('Control').classes('text-2xl')\n                    ui.joystick(color='blue', size=50,\n                                on_move=lambda e: self.send_speed(float(e.y), float(e.x)),\n                                on_end=lambda _: self.send_speed(0.0, 0.0))\n                    ui.label('Publish steering commands by dragging your mouse around in the blue field').classes('mt-6')\n                with ui.card().classes('w-44 text-center items-center'):\n                    ui.label('Data').classes('text-2xl')\n                    ui.label('linear velocity').classes('text-xs mb-[-1.8em]')\n                    slider_props = 'readonly selection-color=transparent'\n                    linear = ui.slider(min=-1, max=1, step=0.05, value=0).props(slider_props)\n                    ui.label('angular velocity').classes('text-xs mb-[-1.8em]')\n                    angular = ui.slider(min=-1, max=1, step=0.05, value=0).props(slider_props)\n                    ui.label('position').classes('text-xs mb-[-1.4em]')\n                    position = ui.label('---')\n                with ui.card().classes('w-96 h-96 items-center'):\n                    ui.label('Visualization').classes('text-2xl')\n                    with ui.scene(350, 300) as scene:\n                        with scene.group() as robot_3d:\n                            prism = [[-0.5, -0.5], [0.5, -0.5], [0.75, 0], [0.5, 0.5], [-0.5, 0.5]]\n                            scene.extrusion(prism, 0.4).material('#4488ff', 0.5)\n\n            @self.pose_update.subscribe\n            def update_pose(msg: Pose):\n                position.text = f'x: {msg.position.x:.2f}, y: {msg.position.y:.2f}'\n                robot_3d.move(msg.position.x, msg.position.y)\n                robot_3d.rotate(0, 0, 2 * math.atan2(msg.orientation.z, msg.orientation.w))\n\n            @self.speed_update.subscribe\n            def update_speed(msg: Twist):\n                linear.value = msg.linear.x\n                angular.value = msg.angular.z\n\n    def send_speed(self, x: float, y: float) -> None:\n        msg = Twist()\n        msg.linear.x = x\n        msg.angular.z = -y\n        self.speed_update.emit(msg)\n        self.cmd_vel_publisher.publish(msg)\n\n\ndef main() -> None:\n    # NOTE: This function is defined as the ROS entry point in setup.py, but it's empty to enable NiceGUI auto-reloading\n    pass\n\n\ndef ros_main() -> None:\n    rclpy.init()\n    node = NiceGuiNode()\n    try:\n        rclpy.spin(node)\n    except ExternalShutdownException:\n        pass\n\n\napp.on_startup(lambda: threading.Thread(target=ros_main).start())\nui_run.APP_IMPORT_STRING = f'{__name__}:app'  # ROS2 uses a non-standard module name, so we need to specify it here\nui.run(uvicorn_reload_dirs=str(Path(__file__).parent.resolve()), favicon='🤖')"
  },
  {
    "instruction": "Example from NiceGUI: ros2/ros2_ws/src/gui/launch/main_launch",
    "response": "from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\n\ndef generate_launch_description():\n    return LaunchDescription([\n        Node(\n            package='gui',\n            executable='nicegui_node',\n            name='example_gui',\n            output='screen',\n        ),\n        Node(\n            package='simulator',\n            executable='simulator_node',\n            name='example_simulator',\n            output='screen',\n        ),\n    ])"
  },
  {
    "instruction": "Example from NiceGUI: ros2/ros2_ws/src/gui/setup",
    "response": "import xml.etree.ElementTree as ET\nfrom pathlib import Path\n\nfrom setuptools import setup\n\npackage_xml = ET.parse('package.xml').getroot()\npackage_name = package_xml.find('name').text\ndata = Path('share') / package_name\nsetup(\n    name=package_name,\n    version=package_xml.find('version').text,\n    packages=[package_name],\n    maintainer=package_xml.find('license').text,\n    maintainer_email=package_xml.find('maintainer').attrib['email'],\n    license=package_xml.find('license').text,\n    data_files=[\n        (str(data), ['package.xml']),\n        (str(data / 'launch'), ['launch/main_launch.py']),\n    ],\n    install_requires=['setuptools'],\n    zip_safe=True,\n    entry_points={\n        'console_scripts': [\n            'nicegui_node = gui.node:main',\n        ],\n    },\n)"
  },
  {
    "instruction": "Example from NiceGUI: ros2/ros2_ws/src/simulator/setup",
    "response": "import xml.etree.ElementTree as ET\nfrom pathlib import Path\n\nfrom setuptools import setup\n\npackage_xml = ET.parse('package.xml').getroot()\npackage_name = package_xml.find('name').text\nsetup(\n    name=package_name,\n    version=package_xml.find('version').text,\n    packages=[package_name],\n    maintainer=package_xml.find('license').text,\n    maintainer_email=package_xml.find('maintainer').attrib['email'],\n    license=package_xml.find('license').text,\n    data_files=[\n        (str(Path('share') / package_name), ['package.xml']),\n    ],\n    install_requires=['setuptools'],\n    zip_safe=True,\n    entry_points={\n        'console_scripts': [\n            'simulator_node = simulator.node:main',\n        ],\n    },\n)"
  },
  {
    "instruction": "Example from NiceGUI: ros2/ros2_ws/src/simulator/simulator/__init__",
    "response": ""
  },
  {
    "instruction": "Example from NiceGUI: ros2/ros2_ws/src/simulator/simulator/node",
    "response": "import math\n\nimport rclpy\nfrom geometry_msgs.msg import Pose, Twist\nfrom rclpy.node import Node\n\n\nclass Simulator(Node):\n    INTERVAL = 0.1\n\n    def __init__(self) -> None:\n        super().__init__('simulator')\n        self.pose_publisher_ = self.create_publisher(Pose, 'pose', 1)\n        self.subscription = self.create_subscription(Twist, 'cmd_vel', self.handle_velocity_command, 1)\n        self.pose = Pose()\n        self.linear_velocity = 0.0\n        self.angular_velocity = 0.0\n        self.timer = self.create_timer(self.INTERVAL, self.update_pose)\n\n    def handle_velocity_command(self, msg: Twist) -> None:\n        self.linear_velocity = msg.linear.x\n        self.angular_velocity = msg.angular.z\n\n    def update_pose(self) -> None:\n        yaw = 2 * math.atan2(self.pose.orientation.z, self.pose.orientation.w)\n        self.pose.position.x += self.linear_velocity * math.cos(yaw) * self.INTERVAL\n        self.pose.position.y += self.linear_velocity * math.sin(yaw) * self.INTERVAL\n        yaw += self.angular_velocity * self.INTERVAL\n        self.pose.orientation.z = math.sin(yaw / 2)\n        self.pose.orientation.w = math.cos(yaw / 2)\n        self.pose_publisher_.publish(self.pose)\n\n\ndef main(args=None) -> None:\n    rclpy.init(args=args)\n    simulator = Simulator()\n    rclpy.spin(simulator)\n    simulator.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "instruction": "Example from NiceGUI: script_executor/hello",
    "response": "import sys\n\nprint(f'Hello, {sys.argv[1] if len(sys.argv) > 1 else \"world\"}!')"
  },
  {
    "instruction": "Example from NiceGUI: script_executor/main",
    "response": "import asyncio\nimport os.path\nimport platform\nimport shlex\nimport sys\n\nfrom nicegui import ui\n\n\nasync def run_command(command: str) -> None:\n    \"\"\"Run a command in the background and display the output in the pre-created dialog.\"\"\"\n    dialog.open()\n    result.content = ''\n    command = command.replace('python3', sys.executable)  # NOTE replace with machine-independent Python path (#1240)\n    process = await asyncio.create_subprocess_exec(\n        *shlex.split(command, posix='win' not in sys.platform.lower()),\n        stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.STDOUT,\n        cwd=os.path.dirname(os.path.abspath(__file__))\n    )\n    # NOTE we need to read the output in chunks, otherwise the process will block\n    output = ''\n    while True:\n        new = await process.stdout.read(4096)\n        if not new:\n            break\n        output += new.decode()\n        # NOTE the content of the markdown element is replaced every time we have new output\n        result.content = f'```\\n{output}\\n```'\n\nwith ui.dialog() as dialog, ui.card():\n    result = ui.markdown()\n\nui.button('python3 hello.py', on_click=lambda: run_command('python3 hello.py')).props('no-caps')\nui.button('python3 slow.py', on_click=lambda: run_command('python3 slow.py')).props('no-caps')\nwith ui.row().classes('items-center'):\n    ui.button('python3 hello.py \"<message>\"', on_click=lambda: run_command(f'python3 hello.py \"{message.value}\"')) \\\n        .props('no-caps')\n    message = ui.input('message', value='NiceGUI')\n\n# NOTE: On Windows reload must be disabled to make asyncio.create_subprocess_exec work (see https://github.com/zauberzeug/nicegui/issues/486)\nui.run(reload=platform.system() != 'Windows')"
  },
  {
    "instruction": "Example from NiceGUI: script_executor/slow",
    "response": "import time\n\nprint('waiting 5 seconds...', flush=True)\ntime.sleep(5)\nprint('done')"
  },
  {
    "instruction": "Example from NiceGUI: search_as_you_type/main",
    "response": "import asyncio\nfrom typing import Optional\n\nimport httpx\n\nfrom nicegui import events, ui\n\napi = httpx.AsyncClient()\nrunning_query: Optional[asyncio.Task] = None\n\n\nasync def search(e: events.ValueChangeEventArguments) -> None:\n    \"\"\"Search for cocktails as you type.\"\"\"\n    global running_query  # pylint: disable=global-statement # noqa: PLW0603\n    if running_query:\n        running_query.cancel()  # cancel the previous query; happens when you type fast\n    search_field.classes('mt-2', remove='mt-24')  # move the search field up\n    results.clear()\n    # store the http coroutine in a task so we can cancel it later if needed\n    running_query = asyncio.create_task(api.get(f'https://www.thecocktaildb.com/api/json/v1/1/search.php?s={e.value}'))\n    response = await running_query\n    if response.text == '':\n        return\n    with results:  # enter the context of the results row\n        for drink in response.json()['drinks'] or []:  # iterate over the response data of the api\n            with ui.image(drink['strDrinkThumb']).classes('w-64'):\n                ui.label(drink['strDrink']).classes('absolute-bottom text-subtitle2 text-center')\n    running_query = None\n\n# create a search field which is initially focused and leaves space at the top\nsearch_field = ui.input(on_change=search) \\\n    .props('autofocus outlined rounded item-aligned input-class=\"ml-3\"') \\\n    .classes('w-96 self-center mt-24 transition-all')\nresults = ui.row()\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: signature_pad/main",
    "response": "from signature_pad import SignaturePad\n\nfrom nicegui import ui\n\npad = SignaturePad().classes('border')\nui.button('Clear', on_click=pad.clear)\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: signature_pad/signature_pad",
    "response": "from typing import Optional\n\nfrom nicegui import ui\n\n\nclass SignaturePad(ui.element, component='signature_pad.js', esm={'signature_pad': 'dist'}):\n\n    def __init__(self, options: Optional[dict] = None) -> None:\n        \"\"\"SignaturePad\n\n        An element that integrates the `Signature Pad library <https://szimek.github.io/signature_pad/>`_.\n        \"\"\"\n        super().__init__()\n        self._props['options'] = options or {}\n\n    def clear(self):\n        \"\"\"Clear the signature.\"\"\"\n        self.run_method('clear')"
  },
  {
    "instruction": "Example from NiceGUI: simpy/async_realtime_environment",
    "response": "import asyncio\nfrom time import monotonic\nfrom typing import Any, Optional, Union\n\nfrom simpy.core import EmptySchedule, Environment, Infinity, SimTime, StopSimulation\nfrom simpy.events import URGENT, Event\nfrom simpy.rt import RealtimeEnvironment\n\n\nclass AsyncRealtimeEnvironment(RealtimeEnvironment):\n    \"\"\"A real-time simulation environment that uses asyncio.\n\n    The methods step and run are a 1-1 copy of the original methods from simpy.rt.RealtimeEnvironment,\n    except that they are async and await asyncio.sleep instead of time.sleep.\n    \"\"\"\n\n    async def step(self) -> None:\n        \"\"\"Process the next event after enough real-time has passed for the\n        event to happen.\n\n        The delay is scaled according to the real-time :attr:`factor`. With\n        :attr:`strict` mode enabled, a :exc:`RuntimeError` will be raised, if\n        the event is processed too slowly.\n\n        \"\"\"\n        evt_time = self.peek()\n\n        if evt_time is Infinity:\n            raise EmptySchedule()\n\n        real_time = self.real_start + (evt_time - self.env_start) * self.factor\n\n        if self.strict and monotonic() - real_time > self.factor:\n            # Events scheduled for time *t* may take just up to *t+1*\n            # for their computation, before an error is raised.\n            delta = monotonic() - real_time\n            raise RuntimeError(\n                f'Simulation too slow for real time ({delta:.3f}s).'\n            )\n\n        # Sleep in a loop to fix inaccuracies of windows (see\n        # https://stackoverflow.com/a/15967564 for details) and to ignore\n        # interrupts.\n        while True:\n            delta = real_time - monotonic()\n            if delta <= 0:\n                break\n            await asyncio.sleep(delta)\n\n        Environment.step(self)\n\n    async def run(\n        self, until: Optional[Union[SimTime, Event]] = None\n    ) -> Optional[Any]:\n        \"\"\"Executes :meth:`step()` until the given criterion *until* is met.\n\n        - If it is ``None`` (which is the default), this method will return\n          when there are no further events to be processed.\n\n        - If it is an :class:`~simpy.events.Event`, the method will continue\n          stepping until this event has been triggered and will return its\n          value.  Raises a :exc:`RuntimeError` if there are no further events\n          to be processed and the *until* event was not triggered.\n\n        - If it is a number, the method will continue stepping\n          until the environment's time reaches *until*.\n\n        \"\"\"\n        if until is not None:\n            if not isinstance(until, Event):\n                # Assume that *until* is a number if it is not None and\n                # not an event.  Create a Timeout(until) in this case.\n                at: SimTime\n                if isinstance(until, int):\n                    at = until\n                else:\n                    at = float(until)\n\n                if at <= self.now:\n                    raise ValueError(\n                        f'until(={at}) must be > the current simulation time.'\n                    )\n\n                # Schedule the event before all regular timeouts.\n                until = Event(self)\n                until._ok = True\n                until._value = None\n                self.schedule(until, URGENT, at - self.now)\n\n            elif until.callbacks is None:\n                # Until event has already been processed.\n                return until.value\n\n            until.callbacks.append(StopSimulation.callback)\n\n        try:\n            while True:\n                await self.step()\n        except StopSimulation as exc:\n            return exc.args[0]  # == until.value\n        except EmptySchedule as e:\n            if until is not None:\n                assert not until.triggered\n                raise RuntimeError(\n                    f'No scheduled events left but \"until\" event was not '\n                    f'triggered: {until}'\n                ) from e\n        return None"
  },
  {
    "instruction": "Example from NiceGUI: simpy/main",
    "response": "import asyncio\nimport datetime\n\nfrom async_realtime_environment import AsyncRealtimeEnvironment\n\nfrom nicegui import Event, ui\n\nstart_time = datetime.datetime.now()\n\n\ntime_updated = Event()\nlight_updated = Event()\nsimulation_completed = Event()\n\n\ndef clock(env):\n    while True:\n        simulation_time = start_time + datetime.timedelta(seconds=env.now)\n        time_updated.emit(simulation_time.strftime('%H:%M:%S'))\n        yield env.timeout(1)\n\n\ndef traffic_light(env):\n    while True:\n        light_updated.emit('green')\n        yield env.timeout(30)\n        light_updated.emit('yellow')\n        yield env.timeout(5)\n        light_updated.emit('red')\n        yield env.timeout(20)\n\n\nasync def run_simpy():\n    env = AsyncRealtimeEnvironment(factor=0.1)  # fast forward simulation with 1/10th of realtime\n    env.process(traffic_light(env))\n    env.process(clock(env))\n    try:\n        await env.run(until=300)  # run until 300 seconds of simulation time have passed\n    except asyncio.CancelledError:\n        return\n    simulation_completed.emit()\n\n\n@ui.page('/')\ndef page():\n    # define the UI\n    with ui.column().classes('absolute-center items-center transition-opacity duration-500'):\n        ui.label('SimPy Traffic Light Demo').classes('text-2xl mb-6')\n        light = ui.element('div').classes('w-10 h-10 rounded-full shadow-lg transition')\n        clock_label = ui.label()\n\n        time_updated.subscribe(clock_label.set_text)\n        light_updated.subscribe(lambda color: light.classes(f'bg-{color}-500',\n                                                            remove='bg-red-500 bg-green-500 bg-yellow-500'))\n        simulation_completed.subscribe(lambda: ui.notify('Simulation completed'))\n\n        ui.button('Run Simulation') \\\n            .on_click(run_simpy) \\\n            .on_click(lambda e: e.sender.delete())\n\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: single_page_app/custom_sub_pages",
    "response": "from typing import Callable\n\nfrom nicegui import app, ui\nfrom nicegui.page_arguments import RouteMatch\n\n\ndef protected(func: Callable) -> Callable:\n    \"\"\"Decorator to mark a route handler as requiring authentication for the custom_sub_pages.\"\"\"\n    func._is_protected = True  # pylint: disable=protected-access\n    return func\n\n\nclass CustomSubPages(ui.sub_pages):\n    \"\"\"Custom ui.sub_pages with built-in authentication and custom 404 handling.\"\"\"\n\n    def _render_page(self, match: RouteMatch) -> bool:\n        if self._is_route_protected(match.builder) and not self._is_authenticated():\n            self._show_login_form(match.full_url)\n            return True\n        return super()._render_page(match)\n\n    def _render_404(self) -> None:\n        with ui.column().classes('absolute-center items-center'):\n            ui.icon('error_outline', size='4rem').classes('text-red')\n            ui.label('404 - Page Not Found').classes('text-2xl text-red')\n            ui.label(f'The page \"{self._router.current_path}\" does not exist.').classes('text-gray-600')\n            with ui.row().classes('mt-4'):\n                ui.button('Go Home', icon='home', on_click=lambda: ui.navigate.to('/')).props('outline')\n                ui.button('Go Back', icon='arrow_back', on_click=ui.navigate.back).props('outline')\n\n    def _render_error(self, error: Exception) -> None:\n        with ui.column().classes('absolute-center items-center'):\n            ui.icon('error_outline', size='4rem').classes('text-red')\n            ui.label('500 - Internal Server Error').classes('text-2xl text-red')\n            ui.label(f'The page \"{self._router.current_path}\" produced an error.').classes('text-gray-600')\n            # NOTE: we do not recommend to show exception messages in production (security risk)\n            ui.label(str(error)).classes('text-gray-600')\n            with ui.row().classes('mt-4'):\n                ui.button('Go Home', icon='home', on_click=lambda: ui.navigate.to('/')).props('outline')\n                ui.button('Go Back', icon='arrow_back', on_click=ui.navigate.back).props('outline')\n\n    def _is_route_protected(self, handler: Callable) -> bool:\n        return getattr(handler, '_is_protected', False)\n\n    def _is_authenticated(self) -> bool:\n        return app.storage.user.get('authenticated', False)\n\n    def _show_login_form(self, intended_path: str) -> None:\n        with ui.card().classes('absolute-center items-stretch'):\n            ui.label('Protected Area').classes('text-2xl')\n            ui.label('Enter passphrase to continue.')\n            passphrase = ui.input('Passphrase', password=True, password_toggle_button=True) \\\n                .classes('w-64').props('autofocus')\n\n            def try_login():\n                if passphrase.value == 'spa':\n                    app.storage.user['authenticated'] = True\n                    self._reset_match()  # NOTE: reset the current match to allow the page to be rendered again\n                    ui.navigate.to(intended_path)\n                else:\n                    ui.notify('Incorrect passphrase', color='negative')\n\n            passphrase.on('keydown.enter', try_login)\n            ui.button('Login', on_click=try_login)\n\n\n# Function-like access following NiceGUI convention where classes are callable to feel like functions\ncustom_sub_pages = CustomSubPages"
  },
  {
    "instruction": "Example from NiceGUI: single_page_app/main",
    "response": "from custom_sub_pages import custom_sub_pages, protected\n\nfrom nicegui import app, ui\n\n\n@ui.page('/')\n@ui.page('/{_:path}')\ndef main_page():\n    with ui.header().classes('items-center bg-blue-100'):\n        ui.button('Home', on_click=lambda: ui.navigate.to('/')).props('flat')\n        ui.button('Secret', on_click=lambda: ui.navigate.to('/secret')).props('flat')\n        ui.button('Invalid', on_click=lambda: ui.navigate.to('/invalid')).props('flat')\n        ui.button('Error', on_click=lambda: ui.navigate.to('/error')).props('flat')\n        ui.space()\n        ui.button('Logout', icon='logout').props('flat') \\\n            .bind_visibility_from(app.storage.user, 'authenticated') \\\n            .on_click(lambda: app.storage.user.update(authenticated=False)) \\\n            .on_click(lambda: ui.navigate.to('/'))\n\n    custom_sub_pages({\n        '/': home,\n        '/secret': secret,\n        '/error': error,\n    }).classes('flex-grow p-4')\n\n\ndef home():\n    ui.markdown('''\n        This example shows inheritance from `ui.sub_pages` for decorator-based route protection and a custom 404 page.\n\n        **Try it:** Navigate to \"Secret\" (passphrase: \"spa\") or \"Invalid\" for 404.\n    ''')\n\n\ndef error():\n    raise ValueError('some error message')\n\n\n@protected\ndef secret():\n    ui.markdown('''\n        ### Secret Area 🔑\n\n        This is confidential information only for authenticated users.\n    ''')\n\n\nif __name__ in {'__main__', '__mp_main__'}:\n    ui.run(storage_secret='demo_secret_key_change_in_production')"
  },
  {
    "instruction": "Example from NiceGUI: slideshow/main",
    "response": "from pathlib import Path\n\nfrom nicegui import app, ui\nfrom nicegui.events import KeyEventArguments\n\nui.query('.nicegui-content').classes('p-0')  # remove padding from the main content\n\nfolder = Path(__file__).parent / 'slides'  # image source: https://pixabay.com/\nfiles = sorted(f.name for f in folder.glob('*.jpg'))\nstate = {'index': 0}\n\n\ndef handle_key(event: KeyEventArguments) -> None:\n    if event.action.keydown:\n        if event.key.arrow_right:\n            state['index'] += 1\n        if event.key.arrow_left:\n            state['index'] -= 1\n        state['index'] %= len(files)\n        slide.set_source(f'slides/{files[state[\"index\"]]}')\n\n\napp.add_static_files('/slides', folder)  # serve all files in this folder\nslide = ui.image(f'slides/{files[state[\"index\"]]}')  # show the first image\nui.keyboard(on_key=handle_key)  # handle keyboard events\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: slots/main",
    "response": "from nicegui import ui\n\ntree = ui.tree([\n    {'id': 'numbers', 'icon': 'tag', 'children': [{'id': '1'}, {'id': '2'}]},\n    {'id': 'letters', 'icon': 'text_fields', 'children': [{'id': 'A'}, {'id': 'B'}]},\n], label_key='id', on_select=lambda e: ui.notify(e.value))\n\ntree.add_slot('default-header', r'''\n    <div class=\"row items-center\">\n        <q-icon :name=\"props.node.icon || 'share'\" color=\"orange\" size=\"28px\" class=\"q-mr-sm\" />\n        <div class=\"text-weight-bold text-primary\">{{ props.node.id }}</div>\n    </div>\n''')\n\nwith tree.add_slot('default-body'):\n    ui.label('This is some default content.').classes('ml-8 text-weight-light text-black')\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: sqlite_database/main",
    "response": "import models\nfrom tortoise import Tortoise\n\nfrom nicegui import app, ui\n\n\nasync def init_db() -> None:\n    await Tortoise.init(db_url='sqlite://db.sqlite3', modules={'models': ['models']})\n    await Tortoise.generate_schemas()\n\n\nasync def close_db() -> None:\n    await Tortoise.close_connections()\n\napp.on_startup(init_db)\napp.on_shutdown(close_db)\n\n\n@ui.refreshable\nasync def list_of_users() -> None:\n    async def delete(user: models.User) -> None:\n        await user.delete()\n        list_of_users.refresh()\n\n    users: list[models.User] = await models.User.all()\n    for user in reversed(users):\n        with ui.card():\n            with ui.row().classes('items-center'):\n                ui.input('Name', on_change=user.save) \\\n                    .bind_value(user, 'name').on('blur', list_of_users.refresh)\n                ui.number('Age', on_change=user.save, format='%.0f') \\\n                    .bind_value(user, 'age').on('blur', list_of_users.refresh).classes('w-20')\n                ui.button(icon='delete', on_click=lambda u=user: delete(u)).props('flat')\n\n\n@ui.page('/')\nasync def index():\n    async def create() -> None:\n        await models.User.create(name=name.value, age=age.value or 0)\n        name.value = ''\n        age.value = None\n        list_of_users.refresh()\n\n    with ui.column().classes('mx-auto'):\n        with ui.row().classes('w-full items-center px-4'):\n            name = ui.input(label='Name')\n            age = ui.number(label='Age', format='%.0f').classes('w-20')\n            ui.button(on_click=create, icon='add').props('flat').classes('ml-auto')\n        await list_of_users()\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: sqlite_database/models",
    "response": "from tortoise import fields, models\n\n\nclass User(models.Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=255)\n    age = fields.IntField()"
  },
  {
    "instruction": "Example from NiceGUI: stripe/main",
    "response": "import stripe\nfrom fastapi.responses import RedirectResponse\n\nfrom nicegui import app, ui\n\nstripe.api_key = 'not-set'  # TODO: set your Stripe API key here\n\n\n@ui.page('/')\ndef index():\n    ui.label('Buy a Product')\n    ui.button('Checkout', on_click=lambda: ui.navigate.to('/checkout'))\n\n\n@app.get('/checkout')\ndef checkout():\n    session = stripe.checkout.Session.create(\n        payment_method_types=['card'],\n        line_items=[{\n            'price_data': {\n                'currency': 'usd',\n                'unit_amount': 2000,  # $20 in cents\n                'product_data': {'name': 'Example Product'},\n            },\n            'quantity': 1,\n        }],\n        mode='payment',\n        success_url='http://localhost:8080/success',\n        cancel_url='http://localhost:8080/cancel',\n    )\n    return RedirectResponse(session.url, status_code=303)\n\n\n@ui.page('/success')\ndef success():\n    ui.label('✅ Payment successful! Thank you.')\n\n\n@ui.page('/cancel')\ndef cancel():\n    ui.label('❌ Payment canceled.')\n\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: svg_clock/main",
    "response": "from datetime import datetime\n\nfrom nicegui import ui\n\n\ndef build_svg() -> str:\n    \"\"\"Returns an SVG showing the current time.\n\n        Original was borrowed from https://de.m.wikipedia.org/wiki/Datei:Station_Clock.svg.\n    \"\"\"\n    now = datetime.now()\n    return f'''\n        <svg width=\"800\" height=\"800\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n            <circle cx=\"400\" cy=\"400\" r=\"400\" fill=\"#fff\"/>\n            <use transform=\"matrix(-1,0,0,1,800,0)\" xlink:href=\"#c\"/>\n            <g id=\"c\">\n                <g id=\"d\">\n                    <path d=\"m400 40v107\" stroke=\"#000\" stroke-width=\"26.7\"/>\n                    <g id=\"a\">\n                        <path d=\"m580 88.233-42.5 73.612\" stroke=\"#000\" stroke-width=\"26.7\"/>\n                        <g id=\"e\">\n                            <path id=\"b\" d=\"m437.63 41.974-3.6585 34.808\" stroke=\"#000\" stroke-width=\"13.6\"/>\n                            <use transform=\"rotate(6 400 400)\" xlink:href=\"#b\"/>\n                        </g>\n                        <use transform=\"rotate(12 400 400)\" xlink:href=\"#e\"/>\n                    </g>\n                    <use transform=\"rotate(30 400 400)\" xlink:href=\"#a\"/>\n                    <use transform=\"rotate(60 400 400)\" xlink:href=\"#a\"/>\n                </g>\n                <use transform=\"rotate(90 400 400)\" xlink:href=\"#d\"/>\n            </g>\n            <g transform=\"rotate({250 + now.hour / 12 * 360} 400 400)\">\n                <path d=\"m334.31 357.65-12.068 33.669 283.94 100.8 23.565-10.394-13.332-24.325z\"/>\n            </g>\n            <g transform=\"rotate({117 + now.minute / 60 * 360} 400 400)\">\n                <path d=\"m480.73 344.98 11.019 21.459-382.37 199.37-18.243-7.2122 4.768-19.029z\"/>\n            </g>\n            <g transform=\"rotate({169 + now.second / 60 * 360} 400 400)\">\n                <path d=\"m410.21 301.98-43.314 242.68a41.963 41.963 0 0 0-2.8605-0.091 41.963 41.963 0 0 0-41.865 42.059 41.963 41.963 0 0 0 30.073 40.144l-18.417 103.18 1.9709 3.9629 3.2997-2.9496 21.156-102.65a41.963 41.963 0 0 0 3.9771 0.1799 41.963 41.963 0 0 0 41.865-42.059 41.963 41.963 0 0 0-29.003-39.815l49.762-241.44zm-42.448 265.56a19.336 19.336 0 0 1 15.703 18.948 19.336 19.336 0 0 1-19.291 19.38 19.336 19.336 0 0 1-19.38-19.291 19.336 19.336 0 0 1 19.291-19.38 19.336 19.336 0 0 1 3.6752 0.3426z\" fill=\"#a40000\"/>\n            </g>\n        </svg>\n    '''\n\n\nclock = ui.html(sanitize=False).classes('self-center')\nui.timer(1, lambda: clock.set_content(build_svg()))\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: table_and_slots/main",
    "response": "import time\n\nfrom nicegui import ui\n\ncolumns = [\n    {'name': 'name', 'label': 'Name', 'field': 'name', 'required': True},\n    {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True},\n]\nrows = [\n    {'id': 0, 'name': 'Alice', 'age': 18},\n    {'id': 1, 'name': 'Bob', 'age': 21},\n    {'id': 2, 'name': 'Lionel', 'age': 19},\n    {'id': 3, 'name': 'Michael', 'age': 32},\n    {'id': 4, 'name': 'Julie', 'age': 12},\n    {'id': 5, 'name': 'Livia', 'age': 25},\n    {'id': 6, 'name': 'Carol'},\n]\n\nwith ui.table(title='My Team', columns=columns, rows=rows, selection='multiple', pagination=10).classes('w-96') as table:\n    with table.add_slot('top-right'):\n        with ui.input(placeholder='Search').props('type=search').bind_value(table, 'filter').add_slot('append'):\n            ui.icon('search')\n    with table.add_slot('bottom-row'):\n        with table.row():\n            with table.cell():\n                ui.button(on_click=lambda: (\n                    table.add_row({'id': time.time(), 'name': new_name.value, 'age': new_age.value}),\n                    new_name.set_value(None),\n                    new_age.set_value(None),\n                ), icon='add').props('flat fab-mini')\n            with table.cell():\n                new_name = ui.input('Name')\n            with table.cell():\n                new_age = ui.number('Age')\n\nui.label().bind_text_from(table, 'selected', lambda val: f'Current selection: {val}')\nui.button('Remove', on_click=lambda: table.remove_rows(table.selected)) \\\n    .bind_visibility_from(table, 'selected', backward=lambda val: bool(val))\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: todo_list/main",
    "response": "from dataclasses import dataclass, field\nfrom typing import Callable\n\nfrom nicegui import ui\n\n\n@dataclass\nclass TodoItem:\n    name: str\n    done: bool = False\n\n\n@dataclass\nclass ToDoList:\n    title: str\n    on_change: Callable\n    items: list[TodoItem] = field(default_factory=list)\n\n    def add(self, name: str, done: bool = False) -> None:\n        self.items.append(TodoItem(name, done))\n        self.on_change()\n\n    def remove(self, item: TodoItem) -> None:\n        self.items.remove(item)\n        self.on_change()\n\n\ndef root():\n    @ui.refreshable\n    def todo_ui():\n        if not todos.items:\n            ui.label('List is empty.').classes('mx-auto')\n            return\n        ui.linear_progress(sum(item.done for item in todos.items) / len(todos.items), show_value=False)\n        with ui.row().classes('justify-center w-full'):\n            ui.label(f'Completed: {sum(item.done for item in todos.items)}')\n            ui.label(f'Remaining: {sum(not item.done for item in todos.items)}')\n        for item in todos.items:\n            with ui.row().classes('items-center'):\n                ui.checkbox(value=item.done, on_change=todo_ui.refresh).bind_value(item, 'done') \\\n                    .mark(f'checkbox-{item.name.lower().replace(\" \", \"-\")}')\n                ui.input(value=item.name).classes('flex-grow').bind_value(item, 'name')\n                ui.button(on_click=lambda item=item: todos.remove(item),\n                          icon='delete').props('flat fab-mini color=grey')\n\n    todos = ToDoList('My Weekend', on_change=todo_ui.refresh)\n    todos.add('Order pizza', done=True)\n    todos.add('New NiceGUI Release')\n    todos.add('Clean the house')\n    todos.add('Call mom')\n\n    with ui.card().classes('w-80 items-stretch'):\n        ui.label().bind_text_from(todos, 'title').classes('text-semibold text-2xl')\n        todo_ui()\n        add_input = ui.input('New item').classes('mx-12').mark('new-item')\n        add_input.on('keydown.enter', lambda: todos.add(add_input.value))\n        add_input.on('keydown.enter', lambda: add_input.set_value(''))\n\n\nui.run(root)"
  },
  {
    "instruction": "Example from NiceGUI: todo_list/test_todo_list",
    "response": "from nicegui.testing import User\n\n# pylint: disable=missing-function-docstring\n\n\nasync def test_checking_items(user: User) -> None:\n    await user.open('/')\n    await user.should_see('Completed: 1')\n    await user.should_see('Remaining: 3')\n\n    user.find('checkbox-new-nicegui-release').click()\n    await user.should_see('Completed: 2')\n    await user.should_see('Remaining: 2')\n\n    user.find('checkbox-call-mom').click()\n    await user.should_see('Completed: 3')\n    await user.should_see('Remaining: 1')\n\n    user.find('checkbox-order-pizza').click()\n    await user.should_see('Completed: 2')\n    await user.should_see('Remaining: 2')\n\n\nasync def test_adding_items(user: User) -> None:\n    await user.open('/')\n\n    user.find('new-item') \\\n        .type('Buy milk').trigger('keydown.enter') \\\n        .type('Buy eggs').trigger('keydown.enter')\n    await user.should_see('Buy milk')\n    await user.should_see('Buy eggs')\n\n    user.find('checkbox-buy-milk').click()\n    await user.should_see('Completed: 2')\n    await user.should_see('Remaining: 4')"
  },
  {
    "instruction": "Example from NiceGUI: trello_cards/draganddrop",
    "response": "from __future__ import annotations\n\nfrom typing import Callable, Protocol\n\nfrom nicegui import ui\n\n\nclass Item(Protocol):\n    title: str\n\n\ndragged: card | None = None\n\n\nclass column(ui.column):\n\n    def __init__(self, name: str, on_drop: Callable[[Item, str], None] | None = None) -> None:\n        super().__init__()\n        with self.classes('bg-blue-grey-2 w-60 p-4 rounded shadow-2'):\n            ui.label(name).classes('text-bold ml-1')\n        self.name = name\n        self.on('dragover.prevent', self.highlight)\n        self.on('dragleave', self.unhighlight)\n        self.on('drop', self.move_card)\n        self.on_drop = on_drop\n\n    def highlight(self) -> None:\n        self.classes(remove='bg-blue-grey-2', add='bg-blue-grey-3')\n\n    def unhighlight(self) -> None:\n        self.classes(remove='bg-blue-grey-3', add='bg-blue-grey-2')\n\n    def move_card(self) -> None:\n        global dragged  # pylint: disable=global-statement # noqa: PLW0603\n        self.unhighlight()\n        dragged.parent_slot.parent.remove(dragged)\n        with self:\n            card(dragged.item)\n        self.on_drop(dragged.item, self.name)\n        dragged = None\n\n\nclass card(ui.card):\n\n    def __init__(self, item: Item) -> None:\n        super().__init__()\n        self.item = item\n        with self.props('draggable').classes('w-full cursor-pointer bg-grey-1'):\n            ui.label(item.title)\n        self.on('dragstart', self.handle_dragstart)\n\n    def handle_dragstart(self) -> None:\n        global dragged  # pylint: disable=global-statement # noqa: PLW0603\n        dragged = self"
  },
  {
    "instruction": "Example from NiceGUI: trello_cards/main",
    "response": "from dataclasses import dataclass\n\nimport draganddrop as dnd\n\nfrom nicegui import ui\n\n\n@dataclass\nclass ToDo:\n    title: str\n\n\ndef handle_drop(todo: ToDo, location: str):\n    ui.notify(f'\"{todo.title}\" is now in {location}')\n\n\nwith ui.row():\n    with dnd.column('Next', on_drop=handle_drop):\n        dnd.card(ToDo('Simplify Layouting'))\n        dnd.card(ToDo('Provide Deployment'))\n    with dnd.column('Doing', on_drop=handle_drop):\n        dnd.card(ToDo('Improve Documentation'))\n    with dnd.column('Done', on_drop=handle_drop):\n        dnd.card(ToDo('Invent NiceGUI'))\n        dnd.card(ToDo('Test in own Projects'))\n        dnd.card(ToDo('Publish as Open Source'))\n        dnd.card(ToDo('Release Native-Mode'))\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: webserial/main",
    "response": "from pathlib import Path\n\nfrom nicegui import ui\n\n\n@ui.page('/')\ndef page():\n    async def connect() -> None:\n        if not await ui.run_javascript('\"serial\" in navigator'):\n            ui.notify('WebSerial is not available in this browser.')\n            return\n\n        if not await ui.run_javascript('connect()', timeout=100):\n            ui.notify('Could not connect to the device.')\n            return\n\n        ui.run_javascript('readLoop()')\n        state['connected'] = True\n\n    async def disconnect() -> None:\n        ui.run_javascript('disconnect()', timeout=5)\n        state['connected'] = False\n\n    state = {\n        'connected': False,\n        'button': False,\n    }\n\n    ui.add_body_html(f'<script>{(Path(__file__).parent / \"script.js\").read_text(encoding=\"utf-8\")}</script>')\n\n    ui.button('Connect', on_click=connect).bind_visibility_from(state, 'connected', value=False)\n    ui.button('Disconnect', on_click=disconnect).bind_visibility_from(state, 'connected')\n    ui.switch('LED', on_change=lambda e: ui.run_javascript(f'send({e.value:d})')).bind_enabled_from(state, 'connected')\n    ui.switch('Button').props('disable').bind_value_from(state, 'button')\n\n    ui.on('read', lambda e: state.update(button=e.args == 'LOW'))\n\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: websockets/main",
    "response": "\"\"\"Websockets example showing messages from connected clients and broadcasting via button click.\n\nNOTE: NiceGUI already handles all the communication for you, so you don't need to worry about websockets and the like normally.\nThis example is only for advanced use cases where you want to allow other, non-NiceGUI clients to connect to your server.\n\"\"\"\nimport asyncio\n\nimport websockets\nfrom websockets.server import ServerConnection\n\nfrom nicegui import Event, app, ui\n\nCONNECTIONS: set[ServerConnection] = set()\n\nconnections_updated = Event()\nmessage_received = Event()\n\n\n@ui.page('/')\ndef page():\n    ui.markdown('''\n        # Websockets Example\n\n        Run this in the console to connect:\n        ```bash\n        python -m websockets ws://localhost:8765/\n        ```\n    ''')\n    count = ui.number(value=len(CONNECTIONS), suffix='connections').props('readonly').classes('w-32')\n    connections_updated.subscribe(lambda: count.set_value(len(CONNECTIONS)))\n\n    ui.label('Incoming messages:')\n    messages = ui.log()\n    message_received.subscribe(messages.push)\n\n    ui.button('Send hello', on_click=lambda: websockets.broadcast(CONNECTIONS, 'Hello!'))\n\n\n@app.on_startup\nasync def start_websocket_server():\n    async with websockets.serve(handle_connect, 'localhost', 8765):\n        await asyncio.Future()\n\n\nasync def handle_connect(websocket: ServerConnection):\n    \"\"\"Register the new websocket connection, handle incoming messages and remove the connection when it is closed.\"\"\"\n    try:\n        CONNECTIONS.add(websocket)\n        connections_updated.emit()\n        async for message in websocket:\n            message_received.emit(str(message))\n    finally:\n        CONNECTIONS.remove(websocket)\n        connections_updated.emit()\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: zeromq/main",
    "response": "from datetime import datetime\n\nimport zmq\nimport zmq.asyncio\n\nfrom nicegui import Event, app, ui\n\nnumber_received = Event()\n\ncontext = zmq.asyncio.Context()\nsocket = context.socket(zmq.PULL)\nsocket.connect('tcp://localhost:5555')\n\npoller = zmq.asyncio.Poller()\npoller.register(socket, zmq.POLLIN)\n\n\n@ui.page('/')\ndef page():\n    line_plot = ui.line_plot(n=1, limit=100, figsize=(10, 4))\n    number_received.subscribe(lambda number: line_plot.push([datetime.now()], [[number]]))\n\n\n@app.on_startup\nasync def read_loop() -> None:\n    while not app.is_stopped:\n        events = await poller.poll()\n        if socket in dict(events):\n            data = await socket.recv()\n            number = float(data)\n            print(f'Received number {number}')\n            number_received.emit(number)\n\nui.run()"
  },
  {
    "instruction": "Example from NiceGUI: zeromq/zmq-server",
    "response": "import asyncio\nimport random\n\nimport zmq\nimport zmq.asyncio\n\ncontext = zmq.asyncio.Context()\nsocket = context.socket(zmq.PUSH)\nsocket.bind('tcp://localhost:5555')\n\n\nasync def send_loop():\n    while True:\n        number = random.randint(0, 100)\n        print(f'Sending number {number}')\n        await socket.send(str(number).encode('ascii'))\n        await asyncio.sleep(0.1)\n\n\nasyncio.run(send_loop())"
  }
]